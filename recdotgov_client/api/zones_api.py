# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from recdotgov_client.api_client import ApiClient


class ZonesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_permit_entrance_zone(
        self, permit_entrance_id, zone_id, **kwargs
    ):  # noqa: E501
        """Retrieve a zone for a permit entrance  # noqa: E501

        This endpoint retrieves a specific zone for a specific permit entrance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_permit_entrance_zone(permit_entrance_id, zone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str permit_entrance_id: Id of the permit entrance (required)
        :param str zone_id: Id of the zone (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_permit_entrance_zone_with_http_info(
                permit_entrance_id, zone_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_permit_entrance_zone_with_http_info(
                permit_entrance_id, zone_id, **kwargs
            )  # noqa: E501
            return data

    def get_permit_entrance_zone_with_http_info(
        self, permit_entrance_id, zone_id, **kwargs
    ):  # noqa: E501
        """Retrieve a zone for a permit entrance  # noqa: E501

        This endpoint retrieves a specific zone for a specific permit entrance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_permit_entrance_zone_with_http_info(permit_entrance_id, zone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str permit_entrance_id: Id of the permit entrance (required)
        :param str zone_id: Id of the zone (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["permit_entrance_id", "zone_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_permit_entrance_zone" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'permit_entrance_id' is set
        if "permit_entrance_id" not in params or params["permit_entrance_id"] is None:
            raise ValueError(
                "Missing the required parameter `permit_entrance_id` when calling `get_permit_entrance_zone`"
            )  # noqa: E501
        # verify the required parameter 'zone_id' is set
        if "zone_id" not in params or params["zone_id"] is None:
            raise ValueError(
                "Missing the required parameter `zone_id` when calling `get_permit_entrance_zone`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "permit_entrance_id" in params:
            path_params["permitEntranceId"] = params["permit_entrance_id"]  # noqa: E501
        if "zone_id" in params:
            path_params["zoneId"] = params["zone_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/permitentrances/{permitEntranceId}/zones/{zoneId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Zone",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_permit_entrance_zones(self, permit_entrance_id, **kwargs):  # noqa: E501
        """Retrieve all zones for a permit entrance  # noqa: E501

        This endpoint retrieves all zones for a specific permit entrance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_permit_entrance_zones(permit_entrance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str permit_entrance_id: Id of the permit entrance (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_permit_entrance_zones_with_http_info(
                permit_entrance_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_permit_entrance_zones_with_http_info(
                permit_entrance_id, **kwargs
            )  # noqa: E501
            return data

    def get_permit_entrance_zones_with_http_info(
        self, permit_entrance_id, **kwargs
    ):  # noqa: E501
        """Retrieve all zones for a permit entrance  # noqa: E501

        This endpoint retrieves all zones for a specific permit entrance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_permit_entrance_zones_with_http_info(permit_entrance_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str permit_entrance_id: Id of the permit entrance (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["permit_entrance_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_permit_entrance_zones" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'permit_entrance_id' is set
        if "permit_entrance_id" not in params or params["permit_entrance_id"] is None:
            raise ValueError(
                "Missing the required parameter `permit_entrance_id` when calling `get_permit_entrance_zones`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "permit_entrance_id" in params:
            path_params["permitEntranceId"] = params["permit_entrance_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/permitentrances/{permitEntranceId}/zones",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse20010",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
