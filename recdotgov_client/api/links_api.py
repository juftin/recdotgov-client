# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from recdotgov_client.api_client import ApiClient


class LinksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_facility_link(self, facility_id, link_id, **kwargs):  # noqa: E501
        """Retrieve a specific link by id for a facility  # noqa: E501

        This endpoint retrieves a specific link for a specific facility.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_facility_link(facility_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility_id: Id of the facility (required)
        :param str link_id: Id of the link (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_facility_link_with_http_info(
                facility_id, link_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_facility_link_with_http_info(
                facility_id, link_id, **kwargs
            )  # noqa: E501
            return data

    def get_facility_link_with_http_info(
        self, facility_id, link_id, **kwargs
    ):  # noqa: E501
        """Retrieve a specific link by id for a facility  # noqa: E501

        This endpoint retrieves a specific link for a specific facility.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_facility_link_with_http_info(facility_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility_id: Id of the facility (required)
        :param str link_id: Id of the link (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["facility_id", "link_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_facility_link" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'facility_id' is set
        if "facility_id" not in params or params["facility_id"] is None:
            raise ValueError(
                "Missing the required parameter `facility_id` when calling `get_facility_link`"
            )  # noqa: E501
        # verify the required parameter 'link_id' is set
        if "link_id" not in params or params["link_id"] is None:
            raise ValueError(
                "Missing the required parameter `link_id` when calling `get_facility_link`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "facility_id" in params:
            path_params["facilityId"] = params["facility_id"]  # noqa: E501
        if "link_id" in params:
            path_params["linkId"] = params["link_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/facilities/{facilityId}/links/{linkId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Link",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_facility_links(self, facility_id, **kwargs):  # noqa: E501
        """Retrieve all links for a facility  # noqa: E501

        This endpoint retrieves all links for a specific facility.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_facility_links(facility_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility_id: Id of the facility (required)
        :param str query: Query filter criteria. Searches on title, description, and link type
        :param int limit: Number of records to return (max 50)
        :param int offset: Start record of overall result set
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_facility_links_with_http_info(
                facility_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_facility_links_with_http_info(
                facility_id, **kwargs
            )  # noqa: E501
            return data

    def get_facility_links_with_http_info(self, facility_id, **kwargs):  # noqa: E501
        """Retrieve all links for a facility  # noqa: E501

        This endpoint retrieves all links for a specific facility.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_facility_links_with_http_info(facility_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str facility_id: Id of the facility (required)
        :param str query: Query filter criteria. Searches on title, description, and link type
        :param int limit: Number of records to return (max 50)
        :param int offset: Start record of overall result set
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["facility_id", "query", "limit", "offset"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_facility_links" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'facility_id' is set
        if "facility_id" not in params or params["facility_id"] is None:
            raise ValueError(
                "Missing the required parameter `facility_id` when calling `get_facility_links`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "facility_id" in params:
            path_params["facilityId"] = params["facility_id"]  # noqa: E501

        query_params = []
        if "query" in params:
            query_params.append(("query", params["query"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "offset" in params:
            query_params.append(("offset", params["offset"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/facilities/{facilityId}/links",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse20012",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_link(self, link_id, **kwargs):  # noqa: E501
        """Retrieve a specific link by id  # noqa: E501

        This endpoint retrieves a specific link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_link(link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str link_id: Id of the link (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_link_with_http_info(link_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_link_with_http_info(link_id, **kwargs)  # noqa: E501
            return data

    def get_link_with_http_info(self, link_id, **kwargs):  # noqa: E501
        """Retrieve a specific link by id  # noqa: E501

        This endpoint retrieves a specific link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_link_with_http_info(link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str link_id: Id of the link (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["link_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_link" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'link_id' is set
        if "link_id" not in params or params["link_id"] is None:
            raise ValueError(
                "Missing the required parameter `link_id` when calling `get_link`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "link_id" in params:
            path_params["linkId"] = params["link_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/links/{linkId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Link",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_links(self, **kwargs):  # noqa: E501
        """Retrieve all links  # noqa: E501

        This endpoint retrieves all links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_links(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query filter criteria. Searches on title, description, and link type
        :param int limit: Number of records to return (max 50)
        :param int offset: Start record of overall result set
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_links_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_links_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_links_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all links  # noqa: E501

        This endpoint retrieves all links.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_links_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Query filter criteria. Searches on title, description, and link type
        :param int limit: Number of records to return (max 50)
        :param int offset: Start record of overall result set
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["query", "limit", "offset"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_links" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "query" in params:
            query_params.append(("query", params["query"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "offset" in params:
            query_params.append(("offset", params["offset"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/links",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse20012",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_rec_area_link(self, rec_area_id, link_id, **kwargs):  # noqa: E501
        """Retrieve a specific link by id for a RecArea  # noqa: E501

        This endpoint retrieves a specific link for a specific RecArea.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rec_area_link(rec_area_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rec_area_id: Id of the RecArea (required)
        :param str link_id: Id of the link (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_rec_area_link_with_http_info(
                rec_area_id, link_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_rec_area_link_with_http_info(
                rec_area_id, link_id, **kwargs
            )  # noqa: E501
            return data

    def get_rec_area_link_with_http_info(
        self, rec_area_id, link_id, **kwargs
    ):  # noqa: E501
        """Retrieve a specific link by id for a RecArea  # noqa: E501

        This endpoint retrieves a specific link for a specific RecArea.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rec_area_link_with_http_info(rec_area_id, link_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rec_area_id: Id of the RecArea (required)
        :param str link_id: Id of the link (required)
        :return: Link
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["rec_area_id", "link_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rec_area_link" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'rec_area_id' is set
        if "rec_area_id" not in params or params["rec_area_id"] is None:
            raise ValueError(
                "Missing the required parameter `rec_area_id` when calling `get_rec_area_link`"
            )  # noqa: E501
        # verify the required parameter 'link_id' is set
        if "link_id" not in params or params["link_id"] is None:
            raise ValueError(
                "Missing the required parameter `link_id` when calling `get_rec_area_link`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "rec_area_id" in params:
            path_params["recAreaId"] = params["rec_area_id"]  # noqa: E501
        if "link_id" in params:
            path_params["linkId"] = params["link_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/recareas/{recAreaId}/links/{linkId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Link",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_rec_area_links(self, rec_area_id, **kwargs):  # noqa: E501
        """Retrieve all links for a RecArea  # noqa: E501

        This endpoint retrieves all links for a specific RecArea.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rec_area_links(rec_area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rec_area_id: Id of the RecArea (required)
        :param str query: Query filter criteria. Searches on title, description, and link type
        :param int limit: Number of records to return (max 50)
        :param int offset: Start record of overall result set
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_rec_area_links_with_http_info(
                rec_area_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_rec_area_links_with_http_info(
                rec_area_id, **kwargs
            )  # noqa: E501
            return data

    def get_rec_area_links_with_http_info(self, rec_area_id, **kwargs):  # noqa: E501
        """Retrieve all links for a RecArea  # noqa: E501

        This endpoint retrieves all links for a specific RecArea.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rec_area_links_with_http_info(rec_area_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rec_area_id: Id of the RecArea (required)
        :param str query: Query filter criteria. Searches on title, description, and link type
        :param int limit: Number of records to return (max 50)
        :param int offset: Start record of overall result set
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["rec_area_id", "query", "limit", "offset"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rec_area_links" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'rec_area_id' is set
        if "rec_area_id" not in params or params["rec_area_id"] is None:
            raise ValueError(
                "Missing the required parameter `rec_area_id` when calling `get_rec_area_links`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "rec_area_id" in params:
            path_params["recAreaId"] = params["rec_area_id"]  # noqa: E501

        query_params = []
        if "query" in params:
            query_params.append(("query", params["query"]))  # noqa: E501
        if "limit" in params:
            query_params.append(("limit", params["limit"]))  # noqa: E501
        if "offset" in params:
            query_params.append(("offset", params["offset"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Apikey"]  # noqa: E501

        return self.api_client.call_api(
            "/recareas/{recAreaId}/links",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InlineResponse20012",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
