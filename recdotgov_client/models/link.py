# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "entity_link_id": "str",
        "link_type": "str",
        "entity_id": "str",
        "entity_type": "str",
        "title": "str",
        "description": "str",
        "url": "str",
    }

    attribute_map = {
        "entity_link_id": "EntityLinkID",
        "link_type": "LinkType",
        "entity_id": "EntityID",
        "entity_type": "EntityType",
        "title": "Title",
        "description": "Description",
        "url": "URL",
    }

    def __init__(
        self,
        entity_link_id=None,
        link_type=None,
        entity_id=None,
        entity_type=None,
        title=None,
        description=None,
        url=None,
    ):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501
        self._entity_link_id = None
        self._link_type = None
        self._entity_id = None
        self._entity_type = None
        self._title = None
        self._description = None
        self._url = None
        self.discriminator = None
        self.entity_link_id = entity_link_id
        self.link_type = link_type
        self.entity_id = entity_id
        self.entity_type = entity_type
        self.title = title
        self.description = description
        self.url = url

    @property
    def entity_link_id(self):
        """Gets the entity_link_id of this Link.  # noqa: E501

        Primary Key  # noqa: E501

        :return: The entity_link_id of this Link.  # noqa: E501
        :rtype: str
        """
        return self._entity_link_id

    @entity_link_id.setter
    def entity_link_id(self, entity_link_id):
        """Sets the entity_link_id of this Link.

        Primary Key  # noqa: E501

        :param entity_link_id: The entity_link_id of this Link.  # noqa: E501
        :type: str
        """
        if entity_link_id is None:
            raise ValueError(
                "Invalid value for `entity_link_id`, must not be `None`"
            )  # noqa: E501

        self._entity_link_id = entity_link_id

    @property
    def link_type(self):
        """Gets the link_type of this Link.  # noqa: E501

        Type of link, e.g. Facebook, Twitter, official site  # noqa: E501

        :return: The link_type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this Link.

        Type of link, e.g. Facebook, Twitter, official site  # noqa: E501

        :param link_type: The link_type of this Link.  # noqa: E501
        :type: str
        """
        if link_type is None:
            raise ValueError(
                "Invalid value for `link_type`, must not be `None`"
            )  # noqa: E501

        self._link_type = link_type

    @property
    def entity_id(self):
        """Gets the entity_id of this Link.  # noqa: E501

        RecArea ID OR Facility ID  # noqa: E501

        :return: The entity_id of this Link.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this Link.

        RecArea ID OR Facility ID  # noqa: E501

        :param entity_id: The entity_id of this Link.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError(
                "Invalid value for `entity_id`, must not be `None`"
            )  # noqa: E501

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this Link.  # noqa: E501

        RecArea or Facility  # noqa: E501

        :return: The entity_type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Link.

        RecArea or Facility  # noqa: E501

        :param entity_type: The entity_type of this Link.  # noqa: E501
        :type: str
        """
        if entity_type is None:
            raise ValueError(
                "Invalid value for `entity_type`, must not be `None`"
            )  # noqa: E501

        self._entity_type = entity_type

    @property
    def title(self):
        """Gets the title of this Link.  # noqa: E501

        Full text title  # noqa: E501

        :return: The title of this Link.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.

        Full text title  # noqa: E501

        :param title: The title of this Link.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError(
                "Invalid value for `title`, must not be `None`"
            )  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Link.  # noqa: E501

        Text description of the entity link  # noqa: E501

        :return: The description of this Link.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Link.

        Text description of the entity link  # noqa: E501

        :param description: The description of this Link.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError(
                "Invalid value for `description`, must not be `None`"
            )  # noqa: E501

        self._description = description

    @property
    def url(self):
        """Gets the url of this Link.  # noqa: E501

        Internet address (URL) to a web site  # noqa: E501

        :return: The url of this Link.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Link.

        Internet address (URL) to a web site  # noqa: E501

        :param url: The url of this Link.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError(
                "Invalid value for `url`, must not be `None`"
            )  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
