# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Activity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "activity_id": "int",
        "activity_parent_id": "int",
        "activity_name": "str",
        "activity_level": "int",
    }

    attribute_map = {
        "activity_id": "ActivityID",
        "activity_parent_id": "ActivityParentID",
        "activity_name": "ActivityName",
        "activity_level": "ActivityLevel",
    }

    def __init__(
        self,
        activity_id=None,
        activity_parent_id=None,
        activity_name=None,
        activity_level=None,
    ):  # noqa: E501
        """Activity - a model defined in Swagger"""  # noqa: E501
        self._activity_id = None
        self._activity_parent_id = None
        self._activity_name = None
        self._activity_level = None
        self.discriminator = None
        self.activity_id = activity_id
        self.activity_parent_id = activity_parent_id
        self.activity_name = activity_name
        self.activity_level = activity_level

    @property
    def activity_id(self):
        """Gets the activity_id of this Activity.  # noqa: E501

        Activity ID  # noqa: E501

        :return: The activity_id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this Activity.

        Activity ID  # noqa: E501

        :param activity_id: The activity_id of this Activity.  # noqa: E501
        :type: int
        """
        if activity_id is None:
            raise ValueError(
                "Invalid value for `activity_id`, must not be `None`"
            )  # noqa: E501

        self._activity_id = activity_id

    @property
    def activity_parent_id(self):
        """Gets the activity_parent_id of this Activity.  # noqa: E501

        ParentID of the related Actitvity  # noqa: E501

        :return: The activity_parent_id of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._activity_parent_id

    @activity_parent_id.setter
    def activity_parent_id(self, activity_parent_id):
        """Sets the activity_parent_id of this Activity.

        ParentID of the related Actitvity  # noqa: E501

        :param activity_parent_id: The activity_parent_id of this Activity.  # noqa: E501
        :type: int
        """
        if activity_parent_id is None:
            raise ValueError(
                "Invalid value for `activity_parent_id`, must not be `None`"
            )  # noqa: E501

        self._activity_parent_id = activity_parent_id

    @property
    def activity_name(self):
        """Gets the activity_name of this Activity.  # noqa: E501

        Name of the activity  # noqa: E501

        :return: The activity_name of this Activity.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this Activity.

        Name of the activity  # noqa: E501

        :param activity_name: The activity_name of this Activity.  # noqa: E501
        :type: str
        """
        if activity_name is None:
            raise ValueError(
                "Invalid value for `activity_name`, must not be `None`"
            )  # noqa: E501

        self._activity_name = activity_name

    @property
    def activity_level(self):
        """Gets the activity_level of this Activity.  # noqa: E501

        Amount of physical exertion to be expected for a given activity such as hiking, swimming, etc  # noqa: E501

        :return: The activity_level of this Activity.  # noqa: E501
        :rtype: int
        """
        return self._activity_level

    @activity_level.setter
    def activity_level(self, activity_level):
        """Sets the activity_level of this Activity.

        Amount of physical exertion to be expected for a given activity such as hiking, swimming, etc  # noqa: E501

        :param activity_level: The activity_level of this Activity.  # noqa: E501
        :type: int
        """
        if activity_level is None:
            raise ValueError(
                "Invalid value for `activity_level`, must not be `None`"
            )  # noqa: E501

        self._activity_level = activity_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Activity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Activity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
