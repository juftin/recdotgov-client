# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RecreationArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "rec_area_id": "str",
        "org_rec_area_id": "str",
        "parent_org_id": "str",
        "rec_area_name": "str",
        "rec_area_description": "str",
        "rec_area_fee_description": "str",
        "rec_area_directions": "str",
        "rec_area_phone": "str",
        "rec_area_email": "str",
        "rec_area_reservation_url": "str",
        "rec_area_map_url": "str",
        "geojson": "RecreationAreaGEOJSON",
        "rec_area_longitude": "float",
        "rec_area_latitude": "float",
        "stay_limit": "str",
        "keywords": "str",
        "reservable": "object",
        "enabled": "object",
        "organization": "list[Organization]",
        "facility": "list[RecreationAreaFacility]",
        "recareaaddress": "list[RecreationAreaAddress]",
        "activity": "list[RecreationAreaActivity]",
        "event": "list[Event]",
        "media": "list[Media]",
        "link": "list[Link]",
    }

    attribute_map = {
        "rec_area_id": "RecAreaID",
        "org_rec_area_id": "OrgRecAreaID",
        "parent_org_id": "ParentOrgID",
        "rec_area_name": "RecAreaName",
        "rec_area_description": "RecAreaDescription",
        "rec_area_fee_description": "RecAreaFeeDescription",
        "rec_area_directions": "RecAreaDirections",
        "rec_area_phone": "RecAreaPhone",
        "rec_area_email": "RecAreaEmail",
        "rec_area_reservation_url": "RecAreaReservationURL",
        "rec_area_map_url": "RecAreaMapURL",
        "geojson": "GEOJSON",
        "rec_area_longitude": "RecAreaLongitude",
        "rec_area_latitude": "RecAreaLatitude",
        "stay_limit": "StayLimit",
        "keywords": "Keywords",
        "reservable": "Reservable",
        "enabled": "Enabled",
        "organization": "ORGANIZATION",
        "facility": "FACILITY",
        "recareaaddress": "RECAREAADDRESS",
        "activity": "ACTIVITY",
        "event": "EVENT",
        "media": "MEDIA",
        "link": "LINK",
    }

    def __init__(
        self,
        rec_area_id=None,
        org_rec_area_id=None,
        parent_org_id=None,
        rec_area_name=None,
        rec_area_description=None,
        rec_area_fee_description=None,
        rec_area_directions=None,
        rec_area_phone=None,
        rec_area_email=None,
        rec_area_reservation_url=None,
        rec_area_map_url=None,
        geojson=None,
        rec_area_longitude=None,
        rec_area_latitude=None,
        stay_limit=None,
        keywords=None,
        reservable=None,
        enabled=None,
        organization=None,
        facility=None,
        recareaaddress=None,
        activity=None,
        event=None,
        media=None,
        link=None,
    ):  # noqa: E501
        """RecreationArea - a model defined in Swagger"""  # noqa: E501
        self._rec_area_id = None
        self._org_rec_area_id = None
        self._parent_org_id = None
        self._rec_area_name = None
        self._rec_area_description = None
        self._rec_area_fee_description = None
        self._rec_area_directions = None
        self._rec_area_phone = None
        self._rec_area_email = None
        self._rec_area_reservation_url = None
        self._rec_area_map_url = None
        self._geojson = None
        self._rec_area_longitude = None
        self._rec_area_latitude = None
        self._stay_limit = None
        self._keywords = None
        self._reservable = None
        self._enabled = None
        self._organization = None
        self._facility = None
        self._recareaaddress = None
        self._activity = None
        self._event = None
        self._media = None
        self._link = None
        self.discriminator = None
        self.rec_area_id = rec_area_id
        self.org_rec_area_id = org_rec_area_id
        if parent_org_id is not None:
            self.parent_org_id = parent_org_id
        self.rec_area_name = rec_area_name
        self.rec_area_description = rec_area_description
        self.rec_area_fee_description = rec_area_fee_description
        self.rec_area_directions = rec_area_directions
        self.rec_area_phone = rec_area_phone
        self.rec_area_email = rec_area_email
        self.rec_area_reservation_url = rec_area_reservation_url
        self.rec_area_map_url = rec_area_map_url
        self.geojson = geojson
        self.rec_area_longitude = rec_area_longitude
        self.rec_area_latitude = rec_area_latitude
        self.stay_limit = stay_limit
        self.keywords = keywords
        self.reservable = reservable
        self.enabled = enabled
        if organization is not None:
            self.organization = organization
        if facility is not None:
            self.facility = facility
        if recareaaddress is not None:
            self.recareaaddress = recareaaddress
        if activity is not None:
            self.activity = activity
        if event is not None:
            self.event = event
        if media is not None:
            self.media = media
        if link is not None:
            self.link = link

    @property
    def rec_area_id(self):
        """Gets the rec_area_id of this RecreationArea.  # noqa: E501

        RIDB unique RecArea ID  # noqa: E501

        :return: The rec_area_id of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_id

    @rec_area_id.setter
    def rec_area_id(self, rec_area_id):
        """Sets the rec_area_id of this RecreationArea.

        RIDB unique RecArea ID  # noqa: E501

        :param rec_area_id: The rec_area_id of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_id is None:
            raise ValueError(
                "Invalid value for `rec_area_id`, must not be `None`"
            )  # noqa: E501

        self._rec_area_id = rec_area_id

    @property
    def org_rec_area_id(self):
        """Gets the org_rec_area_id of this RecreationArea.  # noqa: E501

        The agency's internal RecArea ID provided to the RIDB by the agency  # noqa: E501

        :return: The org_rec_area_id of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._org_rec_area_id

    @org_rec_area_id.setter
    def org_rec_area_id(self, org_rec_area_id):
        """Sets the org_rec_area_id of this RecreationArea.

        The agency's internal RecArea ID provided to the RIDB by the agency  # noqa: E501

        :param org_rec_area_id: The org_rec_area_id of this RecreationArea.  # noqa: E501
        :type: str
        """
        if org_rec_area_id is None:
            raise ValueError(
                "Invalid value for `org_rec_area_id`, must not be `None`"
            )  # noqa: E501

        self._org_rec_area_id = org_rec_area_id

    @property
    def parent_org_id(self):
        """Gets the parent_org_id of this RecreationArea.  # noqa: E501

        Parent Organization ID  # noqa: E501

        :return: The parent_org_id of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._parent_org_id

    @parent_org_id.setter
    def parent_org_id(self, parent_org_id):
        """Sets the parent_org_id of this RecreationArea.

        Parent Organization ID  # noqa: E501

        :param parent_org_id: The parent_org_id of this RecreationArea.  # noqa: E501
        :type: str
        """

        self._parent_org_id = parent_org_id

    @property
    def rec_area_name(self):
        """Gets the rec_area_name of this RecreationArea.  # noqa: E501

        Full name of the RecArea  # noqa: E501

        :return: The rec_area_name of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_name

    @rec_area_name.setter
    def rec_area_name(self, rec_area_name):
        """Sets the rec_area_name of this RecreationArea.

        Full name of the RecArea  # noqa: E501

        :param rec_area_name: The rec_area_name of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_name is None:
            raise ValueError(
                "Invalid value for `rec_area_name`, must not be `None`"
            )  # noqa: E501

        self._rec_area_name = rec_area_name

    @property
    def rec_area_description(self):
        """Gets the rec_area_description of this RecreationArea.  # noqa: E501

        Text that describes the RecArea  # noqa: E501

        :return: The rec_area_description of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_description

    @rec_area_description.setter
    def rec_area_description(self, rec_area_description):
        """Sets the rec_area_description of this RecreationArea.

        Text that describes the RecArea  # noqa: E501

        :param rec_area_description: The rec_area_description of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_description is None:
            raise ValueError(
                "Invalid value for `rec_area_description`, must not be `None`"
            )  # noqa: E501

        self._rec_area_description = rec_area_description

    @property
    def rec_area_fee_description(self):
        """Gets the rec_area_fee_description of this RecreationArea.  # noqa: E501

        Text describing monetary charges associated with entrance to or usage of a RecArea  # noqa: E501

        :return: The rec_area_fee_description of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_fee_description

    @rec_area_fee_description.setter
    def rec_area_fee_description(self, rec_area_fee_description):
        """Sets the rec_area_fee_description of this RecreationArea.

        Text describing monetary charges associated with entrance to or usage of a RecArea  # noqa: E501

        :param rec_area_fee_description: The rec_area_fee_description of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_fee_description is None:
            raise ValueError(
                "Invalid value for `rec_area_fee_description`, must not be `None`"
            )  # noqa: E501

        self._rec_area_fee_description = rec_area_fee_description

    @property
    def rec_area_directions(self):
        """Gets the rec_area_directions of this RecreationArea.  # noqa: E501

        Directions to the RecArea  # noqa: E501

        :return: The rec_area_directions of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_directions

    @rec_area_directions.setter
    def rec_area_directions(self, rec_area_directions):
        """Sets the rec_area_directions of this RecreationArea.

        Directions to the RecArea  # noqa: E501

        :param rec_area_directions: The rec_area_directions of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_directions is None:
            raise ValueError(
                "Invalid value for `rec_area_directions`, must not be `None`"
            )  # noqa: E501

        self._rec_area_directions = rec_area_directions

    @property
    def rec_area_phone(self):
        """Gets the rec_area_phone of this RecreationArea.  # noqa: E501

        Phone number for RecArea  # noqa: E501

        :return: The rec_area_phone of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_phone

    @rec_area_phone.setter
    def rec_area_phone(self, rec_area_phone):
        """Sets the rec_area_phone of this RecreationArea.

        Phone number for RecArea  # noqa: E501

        :param rec_area_phone: The rec_area_phone of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_phone is None:
            raise ValueError(
                "Invalid value for `rec_area_phone`, must not be `None`"
            )  # noqa: E501

        self._rec_area_phone = rec_area_phone

    @property
    def rec_area_email(self):
        """Gets the rec_area_email of this RecreationArea.  # noqa: E501

        Email address of the RecArea  # noqa: E501

        :return: The rec_area_email of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_email

    @rec_area_email.setter
    def rec_area_email(self, rec_area_email):
        """Sets the rec_area_email of this RecreationArea.

        Email address of the RecArea  # noqa: E501

        :param rec_area_email: The rec_area_email of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_email is None:
            raise ValueError(
                "Invalid value for `rec_area_email`, must not be `None`"
            )  # noqa: E501

        self._rec_area_email = rec_area_email

    @property
    def rec_area_reservation_url(self):
        """Gets the rec_area_reservation_url of this RecreationArea.  # noqa: E501

        Internet address (URL) for the web site hosting the reservation system  # noqa: E501

        :return: The rec_area_reservation_url of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_reservation_url

    @rec_area_reservation_url.setter
    def rec_area_reservation_url(self, rec_area_reservation_url):
        """Sets the rec_area_reservation_url of this RecreationArea.

        Internet address (URL) for the web site hosting the reservation system  # noqa: E501

        :param rec_area_reservation_url: The rec_area_reservation_url of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_reservation_url is None:
            raise ValueError(
                "Invalid value for `rec_area_reservation_url`, must not be `None`"
            )  # noqa: E501

        self._rec_area_reservation_url = rec_area_reservation_url

    @property
    def rec_area_map_url(self):
        """Gets the rec_area_map_url of this RecreationArea.  # noqa: E501

        Internet address (URL) that hosts the RecArea map  # noqa: E501

        :return: The rec_area_map_url of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_map_url

    @rec_area_map_url.setter
    def rec_area_map_url(self, rec_area_map_url):
        """Sets the rec_area_map_url of this RecreationArea.

        Internet address (URL) that hosts the RecArea map  # noqa: E501

        :param rec_area_map_url: The rec_area_map_url of this RecreationArea.  # noqa: E501
        :type: str
        """
        if rec_area_map_url is None:
            raise ValueError(
                "Invalid value for `rec_area_map_url`, must not be `None`"
            )  # noqa: E501

        self._rec_area_map_url = rec_area_map_url

    @property
    def geojson(self):
        """Gets the geojson of this RecreationArea.  # noqa: E501


        :return: The geojson of this RecreationArea.  # noqa: E501
        :rtype: RecreationAreaGEOJSON
        """
        return self._geojson

    @geojson.setter
    def geojson(self, geojson):
        """Sets the geojson of this RecreationArea.


        :param geojson: The geojson of this RecreationArea.  # noqa: E501
        :type: RecreationAreaGEOJSON
        """
        if geojson is None:
            raise ValueError(
                "Invalid value for `geojson`, must not be `None`"
            )  # noqa: E501

        self._geojson = geojson

    @property
    def rec_area_longitude(self):
        """Gets the rec_area_longitude of this RecreationArea.  # noqa: E501

        Longitude in decimal degrees -180.0 to 180.0  # noqa: E501

        :return: The rec_area_longitude of this RecreationArea.  # noqa: E501
        :rtype: float
        """
        return self._rec_area_longitude

    @rec_area_longitude.setter
    def rec_area_longitude(self, rec_area_longitude):
        """Sets the rec_area_longitude of this RecreationArea.

        Longitude in decimal degrees -180.0 to 180.0  # noqa: E501

        :param rec_area_longitude: The rec_area_longitude of this RecreationArea.  # noqa: E501
        :type: float
        """
        if rec_area_longitude is None:
            raise ValueError(
                "Invalid value for `rec_area_longitude`, must not be `None`"
            )  # noqa: E501

        self._rec_area_longitude = rec_area_longitude

    @property
    def rec_area_latitude(self):
        """Gets the rec_area_latitude of this RecreationArea.  # noqa: E501

        Latitude in decimal degrees -90.0 to 90.0  # noqa: E501

        :return: The rec_area_latitude of this RecreationArea.  # noqa: E501
        :rtype: float
        """
        return self._rec_area_latitude

    @rec_area_latitude.setter
    def rec_area_latitude(self, rec_area_latitude):
        """Sets the rec_area_latitude of this RecreationArea.

        Latitude in decimal degrees -90.0 to 90.0  # noqa: E501

        :param rec_area_latitude: The rec_area_latitude of this RecreationArea.  # noqa: E501
        :type: float
        """
        if rec_area_latitude is None:
            raise ValueError(
                "Invalid value for `rec_area_latitude`, must not be `None`"
            )  # noqa: E501

        self._rec_area_latitude = rec_area_latitude

    @property
    def stay_limit(self):
        """Gets the stay_limit of this RecreationArea.  # noqa: E501

        Details on the stay limits for the RecArea  # noqa: E501

        :return: The stay_limit of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._stay_limit

    @stay_limit.setter
    def stay_limit(self, stay_limit):
        """Sets the stay_limit of this RecreationArea.

        Details on the stay limits for the RecArea  # noqa: E501

        :param stay_limit: The stay_limit of this RecreationArea.  # noqa: E501
        :type: str
        """
        if stay_limit is None:
            raise ValueError(
                "Invalid value for `stay_limit`, must not be `None`"
            )  # noqa: E501

        self._stay_limit = stay_limit

    @property
    def keywords(self):
        """Gets the keywords of this RecreationArea.  # noqa: E501

        List of keywords for the RecArea  # noqa: E501

        :return: The keywords of this RecreationArea.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this RecreationArea.

        List of keywords for the RecArea  # noqa: E501

        :param keywords: The keywords of this RecreationArea.  # noqa: E501
        :type: str
        """
        if keywords is None:
            raise ValueError(
                "Invalid value for `keywords`, must not be `None`"
            )  # noqa: E501

        self._keywords = keywords

    @property
    def reservable(self):
        """Gets the reservable of this RecreationArea.  # noqa: E501

        Whether the RecArea is reservable  # noqa: E501

        :return: The reservable of this RecreationArea.  # noqa: E501
        :rtype: object
        """
        return self._reservable

    @reservable.setter
    def reservable(self, reservable):
        """Sets the reservable of this RecreationArea.

        Whether the RecArea is reservable  # noqa: E501

        :param reservable: The reservable of this RecreationArea.  # noqa: E501
        :type: object
        """
        if reservable is None:
            raise ValueError(
                "Invalid value for `reservable`, must not be `None`"
            )  # noqa: E501

        self._reservable = reservable

    @property
    def enabled(self):
        """Gets the enabled of this RecreationArea.  # noqa: E501

        Whether the RecArea is enabled  # noqa: E501

        :return: The enabled of this RecreationArea.  # noqa: E501
        :rtype: object
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RecreationArea.

        Whether the RecArea is enabled  # noqa: E501

        :param enabled: The enabled of this RecreationArea.  # noqa: E501
        :type: object
        """
        if enabled is None:
            raise ValueError(
                "Invalid value for `enabled`, must not be `None`"
            )  # noqa: E501

        self._enabled = enabled

    @property
    def organization(self):
        """Gets the organization of this RecreationArea.  # noqa: E501


        :return: The organization of this RecreationArea.  # noqa: E501
        :rtype: list[Organization]
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this RecreationArea.


        :param organization: The organization of this RecreationArea.  # noqa: E501
        :type: list[Organization]
        """

        self._organization = organization

    @property
    def facility(self):
        """Gets the facility of this RecreationArea.  # noqa: E501


        :return: The facility of this RecreationArea.  # noqa: E501
        :rtype: list[RecreationAreaFacility]
        """
        return self._facility

    @facility.setter
    def facility(self, facility):
        """Sets the facility of this RecreationArea.


        :param facility: The facility of this RecreationArea.  # noqa: E501
        :type: list[RecreationAreaFacility]
        """

        self._facility = facility

    @property
    def recareaaddress(self):
        """Gets the recareaaddress of this RecreationArea.  # noqa: E501


        :return: The recareaaddress of this RecreationArea.  # noqa: E501
        :rtype: list[RecreationAreaAddress]
        """
        return self._recareaaddress

    @recareaaddress.setter
    def recareaaddress(self, recareaaddress):
        """Sets the recareaaddress of this RecreationArea.


        :param recareaaddress: The recareaaddress of this RecreationArea.  # noqa: E501
        :type: list[RecreationAreaAddress]
        """

        self._recareaaddress = recareaaddress

    @property
    def activity(self):
        """Gets the activity of this RecreationArea.  # noqa: E501


        :return: The activity of this RecreationArea.  # noqa: E501
        :rtype: list[RecreationAreaActivity]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this RecreationArea.


        :param activity: The activity of this RecreationArea.  # noqa: E501
        :type: list[RecreationAreaActivity]
        """

        self._activity = activity

    @property
    def event(self):
        """Gets the event of this RecreationArea.  # noqa: E501


        :return: The event of this RecreationArea.  # noqa: E501
        :rtype: list[Event]
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this RecreationArea.


        :param event: The event of this RecreationArea.  # noqa: E501
        :type: list[Event]
        """

        self._event = event

    @property
    def media(self):
        """Gets the media of this RecreationArea.  # noqa: E501


        :return: The media of this RecreationArea.  # noqa: E501
        :rtype: list[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this RecreationArea.


        :param media: The media of this RecreationArea.  # noqa: E501
        :type: list[Media]
        """

        self._media = media

    @property
    def link(self):
        """Gets the link of this RecreationArea.  # noqa: E501


        :return: The link of this RecreationArea.  # noqa: E501
        :rtype: list[Link]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this RecreationArea.


        :param link: The link of this RecreationArea.  # noqa: E501
        :type: list[Link]
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(RecreationArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecreationArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
