# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "org_id": "str",
        "org_name": "str",
        "org_image_url": "str",
        "org_url_text": "str",
        "org_url_address": "str",
        "org_type": "str",
        "org_abbrev_name": "str",
        "org_jurisdiction_type": "str",
        "org_parent_id": "str",
        "last_updated_date": "date",
    }

    attribute_map = {
        "org_id": "OrgID",
        "org_name": "OrgName",
        "org_image_url": "OrgImageURL",
        "org_url_text": "OrgURLText",
        "org_url_address": "OrgURLAddress",
        "org_type": "OrgType",
        "org_abbrev_name": "OrgAbbrevName",
        "org_jurisdiction_type": "OrgJurisdictionType",
        "org_parent_id": "OrgParentID",
        "last_updated_date": "LastUpdatedDate",
    }

    def __init__(
        self,
        org_id=None,
        org_name=None,
        org_image_url=None,
        org_url_text=None,
        org_url_address=None,
        org_type=None,
        org_abbrev_name=None,
        org_jurisdiction_type=None,
        org_parent_id=None,
        last_updated_date=None,
    ):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501
        self._org_id = None
        self._org_name = None
        self._org_image_url = None
        self._org_url_text = None
        self._org_url_address = None
        self._org_type = None
        self._org_abbrev_name = None
        self._org_jurisdiction_type = None
        self._org_parent_id = None
        self._last_updated_date = None
        self.discriminator = None
        self.org_id = org_id
        self.org_name = org_name
        self.org_image_url = org_image_url
        self.org_url_text = org_url_text
        self.org_url_address = org_url_address
        self.org_type = org_type
        self.org_abbrev_name = org_abbrev_name
        self.org_jurisdiction_type = org_jurisdiction_type
        self.org_parent_id = org_parent_id
        self.last_updated_date = last_updated_date

    @property
    def org_id(self):
        """Gets the org_id of this Organization.  # noqa: E501

        Organization ID  # noqa: E501

        :return: The org_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Organization.

        Organization ID  # noqa: E501

        :param org_id: The org_id of this Organization.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError(
                "Invalid value for `org_id`, must not be `None`"
            )  # noqa: E501

        self._org_id = org_id

    @property
    def org_name(self):
        """Gets the org_name of this Organization.  # noqa: E501

        Full name of organization  # noqa: E501

        :return: The org_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this Organization.

        Full name of organization  # noqa: E501

        :param org_name: The org_name of this Organization.  # noqa: E501
        :type: str
        """
        if org_name is None:
            raise ValueError(
                "Invalid value for `org_name`, must not be `None`"
            )  # noqa: E501

        self._org_name = org_name

    @property
    def org_image_url(self):
        """Gets the org_image_url of this Organization.  # noqa: E501

        Internet address (URL) that hosts the sample image or photo of the organization  # noqa: E501

        :return: The org_image_url of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_image_url

    @org_image_url.setter
    def org_image_url(self, org_image_url):
        """Sets the org_image_url of this Organization.

        Internet address (URL) that hosts the sample image or photo of the organization  # noqa: E501

        :param org_image_url: The org_image_url of this Organization.  # noqa: E501
        :type: str
        """
        if org_image_url is None:
            raise ValueError(
                "Invalid value for `org_image_url`, must not be `None`"
            )  # noqa: E501

        self._org_image_url = org_image_url

    @property
    def org_url_text(self):
        """Gets the org_url_text of this Organization.  # noqa: E501

        Optional Readable text that provides the URL address link  # noqa: E501

        :return: The org_url_text of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_url_text

    @org_url_text.setter
    def org_url_text(self, org_url_text):
        """Sets the org_url_text of this Organization.

        Optional Readable text that provides the URL address link  # noqa: E501

        :param org_url_text: The org_url_text of this Organization.  # noqa: E501
        :type: str
        """
        if org_url_text is None:
            raise ValueError(
                "Invalid value for `org_url_text`, must not be `None`"
            )  # noqa: E501

        self._org_url_text = org_url_text

    @property
    def org_url_address(self):
        """Gets the org_url_address of this Organization.  # noqa: E501

        Internet address (URL) for web site of the organization responsible for submitting and maintaining the data to be exchanged  # noqa: E501

        :return: The org_url_address of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_url_address

    @org_url_address.setter
    def org_url_address(self, org_url_address):
        """Sets the org_url_address of this Organization.

        Internet address (URL) for web site of the organization responsible for submitting and maintaining the data to be exchanged  # noqa: E501

        :param org_url_address: The org_url_address of this Organization.  # noqa: E501
        :type: str
        """
        if org_url_address is None:
            raise ValueError(
                "Invalid value for `org_url_address`, must not be `None`"
            )  # noqa: E501

        self._org_url_address = org_url_address

    @property
    def org_type(self):
        """Gets the org_type of this Organization.  # noqa: E501

        Internet address (URL) that hosts the sample image or photo of the organization  # noqa: E501

        :return: The org_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_type

    @org_type.setter
    def org_type(self, org_type):
        """Sets the org_type of this Organization.

        Internet address (URL) that hosts the sample image or photo of the organization  # noqa: E501

        :param org_type: The org_type of this Organization.  # noqa: E501
        :type: str
        """
        if org_type is None:
            raise ValueError(
                "Invalid value for `org_type`, must not be `None`"
            )  # noqa: E501

        self._org_type = org_type

    @property
    def org_abbrev_name(self):
        """Gets the org_abbrev_name of this Organization.  # noqa: E501

        Abbreviated name of the organization  # noqa: E501

        :return: The org_abbrev_name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_abbrev_name

    @org_abbrev_name.setter
    def org_abbrev_name(self, org_abbrev_name):
        """Sets the org_abbrev_name of this Organization.

        Abbreviated name of the organization  # noqa: E501

        :param org_abbrev_name: The org_abbrev_name of this Organization.  # noqa: E501
        :type: str
        """
        if org_abbrev_name is None:
            raise ValueError(
                "Invalid value for `org_abbrev_name`, must not be `None`"
            )  # noqa: E501

        self._org_abbrev_name = org_abbrev_name

    @property
    def org_jurisdiction_type(self):
        """Gets the org_jurisdiction_type of this Organization.  # noqa: E501

        Organization jurisdiction type  # noqa: E501

        :return: The org_jurisdiction_type of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_jurisdiction_type

    @org_jurisdiction_type.setter
    def org_jurisdiction_type(self, org_jurisdiction_type):
        """Sets the org_jurisdiction_type of this Organization.

        Organization jurisdiction type  # noqa: E501

        :param org_jurisdiction_type: The org_jurisdiction_type of this Organization.  # noqa: E501
        :type: str
        """
        if org_jurisdiction_type is None:
            raise ValueError(
                "Invalid value for `org_jurisdiction_type`, must not be `None`"
            )  # noqa: E501

        self._org_jurisdiction_type = org_jurisdiction_type

    @property
    def org_parent_id(self):
        """Gets the org_parent_id of this Organization.  # noqa: E501

        Parent Organization ID  # noqa: E501

        :return: The org_parent_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._org_parent_id

    @org_parent_id.setter
    def org_parent_id(self, org_parent_id):
        """Sets the org_parent_id of this Organization.

        Parent Organization ID  # noqa: E501

        :param org_parent_id: The org_parent_id of this Organization.  # noqa: E501
        :type: str
        """
        if org_parent_id is None:
            raise ValueError(
                "Invalid value for `org_parent_id`, must not be `None`"
            )  # noqa: E501

        self._org_parent_id = org_parent_id

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this Organization.  # noqa: E501

        Record last update date  # noqa: E501

        :return: The last_updated_date of this Organization.  # noqa: E501
        :rtype: date
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this Organization.

        Record last update date  # noqa: E501

        :param last_updated_date: The last_updated_date of this Organization.  # noqa: E501
        :type: date
        """
        if last_updated_date is None:
            raise ValueError(
                "Invalid value for `last_updated_date`, must not be `None`"
            )  # noqa: E501

        self._last_updated_date = last_updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
