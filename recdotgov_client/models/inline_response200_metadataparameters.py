# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InlineResponse200METADATAPARAMETERS(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"query": "str", "limit": "int", "offset": "int"}

    attribute_map = {"query": "QUERY", "limit": "LIMIT", "offset": "OFFSET"}

    def __init__(self, query=None, limit=None, offset=None):  # noqa: E501
        """InlineResponse200METADATAPARAMETERS - a model defined in Swagger"""  # noqa: E501
        self._query = None
        self._limit = None
        self._offset = None
        self.discriminator = None
        if query is not None:
            self.query = query
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def query(self):
        """Gets the query of this InlineResponse200METADATAPARAMETERS.  # noqa: E501


        :return: The query of this InlineResponse200METADATAPARAMETERS.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this InlineResponse200METADATAPARAMETERS.


        :param query: The query of this InlineResponse200METADATAPARAMETERS.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def limit(self):
        """Gets the limit of this InlineResponse200METADATAPARAMETERS.  # noqa: E501


        :return: The limit of this InlineResponse200METADATAPARAMETERS.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this InlineResponse200METADATAPARAMETERS.


        :param limit: The limit of this InlineResponse200METADATAPARAMETERS.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this InlineResponse200METADATAPARAMETERS.  # noqa: E501


        :return: The offset of this InlineResponse200METADATAPARAMETERS.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InlineResponse200METADATAPARAMETERS.


        :param offset: The offset of this InlineResponse200METADATAPARAMETERS.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(InlineResponse200METADATAPARAMETERS, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200METADATAPARAMETERS):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
