# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Facility(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "facility_id": "str",
        "legacy_facility_id": "str",
        "org_facility_id": "str",
        "parent_org_id": "str",
        "parent_rec_area_id": "str",
        "facility_name": "str",
        "facility_description": "str",
        "facility_type_description": "str",
        "facility_use_fee_description": "str",
        "facility_directions": "str",
        "facility_phone": "str",
        "facility_email": "str",
        "facility_reservation_url": "str",
        "facility_map_url": "str",
        "facility_ada_access": "str",
        "geojson": "FacilityGEOJSON",
        "facility_longitude": "float",
        "facility_latitude": "float",
        "stay_limit": "str",
        "keywords": "str",
        "reservable": "object",
        "enabled": "object",
        "campsite": "list[FacilityCampsite]",
        "permitentrance": "list[FacilityPermitEntrance]",
        "tour": "list[FacilityTour]",
        "organization": "list[Organization]",
        "recarea": "list[FacilityRecArea]",
        "facilityaddress": "list[FacilityAddress]",
        "activity": "list[FacilityActivity]",
        "event": "list[Event]",
        "link": "list[Link]",
        "media": "list[Media]",
    }

    attribute_map = {
        "facility_id": "FacilityID",
        "legacy_facility_id": "LegacyFacilityID",
        "org_facility_id": "OrgFacilityID",
        "parent_org_id": "ParentOrgID",
        "parent_rec_area_id": "ParentRecAreaID",
        "facility_name": "FacilityName",
        "facility_description": "FacilityDescription",
        "facility_type_description": "FacilityTypeDescription",
        "facility_use_fee_description": "FacilityUseFeeDescription",
        "facility_directions": "FacilityDirections",
        "facility_phone": "FacilityPhone",
        "facility_email": "FacilityEmail",
        "facility_reservation_url": "FacilityReservationURL",
        "facility_map_url": "FacilityMapURL",
        "facility_ada_access": "FacilityAdaAccess",
        "geojson": "GEOJSON",
        "facility_longitude": "FacilityLongitude",
        "facility_latitude": "FacilityLatitude",
        "stay_limit": "StayLimit",
        "keywords": "Keywords",
        "reservable": "Reservable",
        "enabled": "Enabled",
        "campsite": "CAMPSITE",
        "permitentrance": "PERMITENTRANCE",
        "tour": "TOUR",
        "organization": "ORGANIZATION",
        "recarea": "RECAREA",
        "facilityaddress": "FACILITYADDRESS",
        "activity": "ACTIVITY",
        "event": "EVENT",
        "link": "LINK",
        "media": "MEDIA",
    }

    def __init__(
        self,
        facility_id=None,
        legacy_facility_id=None,
        org_facility_id=None,
        parent_org_id=None,
        parent_rec_area_id=None,
        facility_name=None,
        facility_description=None,
        facility_type_description=None,
        facility_use_fee_description=None,
        facility_directions=None,
        facility_phone=None,
        facility_email=None,
        facility_reservation_url=None,
        facility_map_url=None,
        facility_ada_access=None,
        geojson=None,
        facility_longitude=None,
        facility_latitude=None,
        stay_limit=None,
        keywords=None,
        reservable=None,
        enabled=None,
        campsite=None,
        permitentrance=None,
        tour=None,
        organization=None,
        recarea=None,
        facilityaddress=None,
        activity=None,
        event=None,
        link=None,
        media=None,
    ):  # noqa: E501
        """Facility - a model defined in Swagger"""  # noqa: E501
        self._facility_id = None
        self._legacy_facility_id = None
        self._org_facility_id = None
        self._parent_org_id = None
        self._parent_rec_area_id = None
        self._facility_name = None
        self._facility_description = None
        self._facility_type_description = None
        self._facility_use_fee_description = None
        self._facility_directions = None
        self._facility_phone = None
        self._facility_email = None
        self._facility_reservation_url = None
        self._facility_map_url = None
        self._facility_ada_access = None
        self._geojson = None
        self._facility_longitude = None
        self._facility_latitude = None
        self._stay_limit = None
        self._keywords = None
        self._reservable = None
        self._enabled = None
        self._campsite = None
        self._permitentrance = None
        self._tour = None
        self._organization = None
        self._recarea = None
        self._facilityaddress = None
        self._activity = None
        self._event = None
        self._link = None
        self._media = None
        self.discriminator = None
        self.facility_id = facility_id
        self.legacy_facility_id = legacy_facility_id
        self.org_facility_id = org_facility_id
        if parent_org_id is not None:
            self.parent_org_id = parent_org_id
        if parent_rec_area_id is not None:
            self.parent_rec_area_id = parent_rec_area_id
        self.facility_name = facility_name
        self.facility_description = facility_description
        self.facility_type_description = facility_type_description
        self.facility_use_fee_description = facility_use_fee_description
        self.facility_directions = facility_directions
        self.facility_phone = facility_phone
        self.facility_email = facility_email
        self.facility_reservation_url = facility_reservation_url
        self.facility_map_url = facility_map_url
        self.facility_ada_access = facility_ada_access
        self.geojson = geojson
        self.facility_longitude = facility_longitude
        self.facility_latitude = facility_latitude
        self.stay_limit = stay_limit
        self.keywords = keywords
        self.reservable = reservable
        self.enabled = enabled
        if campsite is not None:
            self.campsite = campsite
        if permitentrance is not None:
            self.permitentrance = permitentrance
        if tour is not None:
            self.tour = tour
        if organization is not None:
            self.organization = organization
        if recarea is not None:
            self.recarea = recarea
        if facilityaddress is not None:
            self.facilityaddress = facilityaddress
        if activity is not None:
            self.activity = activity
        if event is not None:
            self.event = event
        if link is not None:
            self.link = link
        if media is not None:
            self.media = media

    @property
    def facility_id(self):
        """Gets the facility_id of this Facility.  # noqa: E501

        RIDB unique Facility ID  # noqa: E501

        :return: The facility_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this Facility.

        RIDB unique Facility ID  # noqa: E501

        :param facility_id: The facility_id of this Facility.  # noqa: E501
        :type: str
        """
        if facility_id is None:
            raise ValueError(
                "Invalid value for `facility_id`, must not be `None`"
            )  # noqa: E501

        self._facility_id = facility_id

    @property
    def legacy_facility_id(self):
        """Gets the legacy_facility_id of this Facility.  # noqa: E501

        Legacy Facility ID  # noqa: E501

        :return: The legacy_facility_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._legacy_facility_id

    @legacy_facility_id.setter
    def legacy_facility_id(self, legacy_facility_id):
        """Sets the legacy_facility_id of this Facility.

        Legacy Facility ID  # noqa: E501

        :param legacy_facility_id: The legacy_facility_id of this Facility.  # noqa: E501
        :type: str
        """
        if legacy_facility_id is None:
            raise ValueError(
                "Invalid value for `legacy_facility_id`, must not be `None`"
            )  # noqa: E501

        self._legacy_facility_id = legacy_facility_id

    @property
    def org_facility_id(self):
        """Gets the org_facility_id of this Facility.  # noqa: E501

        The agency's internal Facility ID provided to the RIDB by the agency  # noqa: E501

        :return: The org_facility_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._org_facility_id

    @org_facility_id.setter
    def org_facility_id(self, org_facility_id):
        """Sets the org_facility_id of this Facility.

        The agency's internal Facility ID provided to the RIDB by the agency  # noqa: E501

        :param org_facility_id: The org_facility_id of this Facility.  # noqa: E501
        :type: str
        """
        if org_facility_id is None:
            raise ValueError(
                "Invalid value for `org_facility_id`, must not be `None`"
            )  # noqa: E501

        self._org_facility_id = org_facility_id

    @property
    def parent_org_id(self):
        """Gets the parent_org_id of this Facility.  # noqa: E501

        The parent Organization ID  # noqa: E501

        :return: The parent_org_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._parent_org_id

    @parent_org_id.setter
    def parent_org_id(self, parent_org_id):
        """Sets the parent_org_id of this Facility.

        The parent Organization ID  # noqa: E501

        :param parent_org_id: The parent_org_id of this Facility.  # noqa: E501
        :type: str
        """

        self._parent_org_id = parent_org_id

    @property
    def parent_rec_area_id(self):
        """Gets the parent_rec_area_id of this Facility.  # noqa: E501

        The parent RecArea ID  # noqa: E501

        :return: The parent_rec_area_id of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._parent_rec_area_id

    @parent_rec_area_id.setter
    def parent_rec_area_id(self, parent_rec_area_id):
        """Sets the parent_rec_area_id of this Facility.

        The parent RecArea ID  # noqa: E501

        :param parent_rec_area_id: The parent_rec_area_id of this Facility.  # noqa: E501
        :type: str
        """

        self._parent_rec_area_id = parent_rec_area_id

    @property
    def facility_name(self):
        """Gets the facility_name of this Facility.  # noqa: E501

        Full name of the Facility  # noqa: E501

        :return: The facility_name of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this Facility.

        Full name of the Facility  # noqa: E501

        :param facility_name: The facility_name of this Facility.  # noqa: E501
        :type: str
        """
        if facility_name is None:
            raise ValueError(
                "Invalid value for `facility_name`, must not be `None`"
            )  # noqa: E501

        self._facility_name = facility_name

    @property
    def facility_description(self):
        """Gets the facility_description of this Facility.  # noqa: E501

        Text describing the main features of the Facility  # noqa: E501

        :return: The facility_description of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_description

    @facility_description.setter
    def facility_description(self, facility_description):
        """Sets the facility_description of this Facility.

        Text describing the main features of the Facility  # noqa: E501

        :param facility_description: The facility_description of this Facility.  # noqa: E501
        :type: str
        """
        if facility_description is None:
            raise ValueError(
                "Invalid value for `facility_description`, must not be `None`"
            )  # noqa: E501

        self._facility_description = facility_description

    @property
    def facility_type_description(self):
        """Gets the facility_type_description of this Facility.  # noqa: E501

        Description of the type of Facility  # noqa: E501

        :return: The facility_type_description of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_type_description

    @facility_type_description.setter
    def facility_type_description(self, facility_type_description):
        """Sets the facility_type_description of this Facility.

        Description of the type of Facility  # noqa: E501

        :param facility_type_description: The facility_type_description of this Facility.  # noqa: E501
        :type: str
        """
        if facility_type_description is None:
            raise ValueError(
                "Invalid value for `facility_type_description`, must not be `None`"
            )  # noqa: E501

        self._facility_type_description = facility_type_description

    @property
    def facility_use_fee_description(self):
        """Gets the facility_use_fee_description of this Facility.  # noqa: E501

        Text describing monetary charges associated with entrance to or usage of the Facility  # noqa: E501

        :return: The facility_use_fee_description of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_use_fee_description

    @facility_use_fee_description.setter
    def facility_use_fee_description(self, facility_use_fee_description):
        """Sets the facility_use_fee_description of this Facility.

        Text describing monetary charges associated with entrance to or usage of the Facility  # noqa: E501

        :param facility_use_fee_description: The facility_use_fee_description of this Facility.  # noqa: E501
        :type: str
        """
        if facility_use_fee_description is None:
            raise ValueError(
                "Invalid value for `facility_use_fee_description`, must not be `None`"
            )  # noqa: E501

        self._facility_use_fee_description = facility_use_fee_description

    @property
    def facility_directions(self):
        """Gets the facility_directions of this Facility.  # noqa: E501

        Text that provides general directions and/or the general location of the Facility  # noqa: E501

        :return: The facility_directions of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_directions

    @facility_directions.setter
    def facility_directions(self, facility_directions):
        """Sets the facility_directions of this Facility.

        Text that provides general directions and/or the general location of the Facility  # noqa: E501

        :param facility_directions: The facility_directions of this Facility.  # noqa: E501
        :type: str
        """
        if facility_directions is None:
            raise ValueError(
                "Invalid value for `facility_directions`, must not be `None`"
            )  # noqa: E501

        self._facility_directions = facility_directions

    @property
    def facility_phone(self):
        """Gets the facility_phone of this Facility.  # noqa: E501

        Phone number of the Facility  # noqa: E501

        :return: The facility_phone of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_phone

    @facility_phone.setter
    def facility_phone(self, facility_phone):
        """Sets the facility_phone of this Facility.

        Phone number of the Facility  # noqa: E501

        :param facility_phone: The facility_phone of this Facility.  # noqa: E501
        :type: str
        """
        if facility_phone is None:
            raise ValueError(
                "Invalid value for `facility_phone`, must not be `None`"
            )  # noqa: E501

        self._facility_phone = facility_phone

    @property
    def facility_email(self):
        """Gets the facility_email of this Facility.  # noqa: E501

        Email address of the Facility  # noqa: E501

        :return: The facility_email of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_email

    @facility_email.setter
    def facility_email(self, facility_email):
        """Sets the facility_email of this Facility.

        Email address of the Facility  # noqa: E501

        :param facility_email: The facility_email of this Facility.  # noqa: E501
        :type: str
        """
        if facility_email is None:
            raise ValueError(
                "Invalid value for `facility_email`, must not be `None`"
            )  # noqa: E501

        self._facility_email = facility_email

    @property
    def facility_reservation_url(self):
        """Gets the facility_reservation_url of this Facility.  # noqa: E501

        Internet address (URL) for the web site hosting the reservation system  # noqa: E501

        :return: The facility_reservation_url of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_reservation_url

    @facility_reservation_url.setter
    def facility_reservation_url(self, facility_reservation_url):
        """Sets the facility_reservation_url of this Facility.

        Internet address (URL) for the web site hosting the reservation system  # noqa: E501

        :param facility_reservation_url: The facility_reservation_url of this Facility.  # noqa: E501
        :type: str
        """
        if facility_reservation_url is None:
            raise ValueError(
                "Invalid value for `facility_reservation_url`, must not be `None`"
            )  # noqa: E501

        self._facility_reservation_url = facility_reservation_url

    @property
    def facility_map_url(self):
        """Gets the facility_map_url of this Facility.  # noqa: E501

        Internet address (URL) that hosts the Facility map  # noqa: E501

        :return: The facility_map_url of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_map_url

    @facility_map_url.setter
    def facility_map_url(self, facility_map_url):
        """Sets the facility_map_url of this Facility.

        Internet address (URL) that hosts the Facility map  # noqa: E501

        :param facility_map_url: The facility_map_url of this Facility.  # noqa: E501
        :type: str
        """
        if facility_map_url is None:
            raise ValueError(
                "Invalid value for `facility_map_url`, must not be `None`"
            )  # noqa: E501

        self._facility_map_url = facility_map_url

    @property
    def facility_ada_access(self):
        """Gets the facility_ada_access of this Facility.  # noqa: E501

        Information about the Americans with Disabilities Act accessibility for the Facility  # noqa: E501

        :return: The facility_ada_access of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._facility_ada_access

    @facility_ada_access.setter
    def facility_ada_access(self, facility_ada_access):
        """Sets the facility_ada_access of this Facility.

        Information about the Americans with Disabilities Act accessibility for the Facility  # noqa: E501

        :param facility_ada_access: The facility_ada_access of this Facility.  # noqa: E501
        :type: str
        """
        if facility_ada_access is None:
            raise ValueError(
                "Invalid value for `facility_ada_access`, must not be `None`"
            )  # noqa: E501

        self._facility_ada_access = facility_ada_access

    @property
    def geojson(self):
        """Gets the geojson of this Facility.  # noqa: E501


        :return: The geojson of this Facility.  # noqa: E501
        :rtype: FacilityGEOJSON
        """
        return self._geojson

    @geojson.setter
    def geojson(self, geojson):
        """Sets the geojson of this Facility.


        :param geojson: The geojson of this Facility.  # noqa: E501
        :type: FacilityGEOJSON
        """
        if geojson is None:
            raise ValueError(
                "Invalid value for `geojson`, must not be `None`"
            )  # noqa: E501

        self._geojson = geojson

    @property
    def facility_longitude(self):
        """Gets the facility_longitude of this Facility.  # noqa: E501

        Longitude in decimal degrees -180.0 to 180.0  # noqa: E501

        :return: The facility_longitude of this Facility.  # noqa: E501
        :rtype: float
        """
        return self._facility_longitude

    @facility_longitude.setter
    def facility_longitude(self, facility_longitude):
        """Sets the facility_longitude of this Facility.

        Longitude in decimal degrees -180.0 to 180.0  # noqa: E501

        :param facility_longitude: The facility_longitude of this Facility.  # noqa: E501
        :type: float
        """
        if facility_longitude is None:
            raise ValueError(
                "Invalid value for `facility_longitude`, must not be `None`"
            )  # noqa: E501

        self._facility_longitude = facility_longitude

    @property
    def facility_latitude(self):
        """Gets the facility_latitude of this Facility.  # noqa: E501

        Latitude in decimal degrees -90.0 to 90.0  # noqa: E501

        :return: The facility_latitude of this Facility.  # noqa: E501
        :rtype: float
        """
        return self._facility_latitude

    @facility_latitude.setter
    def facility_latitude(self, facility_latitude):
        """Sets the facility_latitude of this Facility.

        Latitude in decimal degrees -90.0 to 90.0  # noqa: E501

        :param facility_latitude: The facility_latitude of this Facility.  # noqa: E501
        :type: float
        """
        if facility_latitude is None:
            raise ValueError(
                "Invalid value for `facility_latitude`, must not be `None`"
            )  # noqa: E501

        self._facility_latitude = facility_latitude

    @property
    def stay_limit(self):
        """Gets the stay_limit of this Facility.  # noqa: E501

        Details on the stay limits for the Facility  # noqa: E501

        :return: The stay_limit of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._stay_limit

    @stay_limit.setter
    def stay_limit(self, stay_limit):
        """Sets the stay_limit of this Facility.

        Details on the stay limits for the Facility  # noqa: E501

        :param stay_limit: The stay_limit of this Facility.  # noqa: E501
        :type: str
        """
        if stay_limit is None:
            raise ValueError(
                "Invalid value for `stay_limit`, must not be `None`"
            )  # noqa: E501

        self._stay_limit = stay_limit

    @property
    def keywords(self):
        """Gets the keywords of this Facility.  # noqa: E501

        List of keywords for the Facility  # noqa: E501

        :return: The keywords of this Facility.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Facility.

        List of keywords for the Facility  # noqa: E501

        :param keywords: The keywords of this Facility.  # noqa: E501
        :type: str
        """
        if keywords is None:
            raise ValueError(
                "Invalid value for `keywords`, must not be `None`"
            )  # noqa: E501

        self._keywords = keywords

    @property
    def reservable(self):
        """Gets the reservable of this Facility.  # noqa: E501

        Whether the Facility is reservable  # noqa: E501

        :return: The reservable of this Facility.  # noqa: E501
        :rtype: object
        """
        return self._reservable

    @reservable.setter
    def reservable(self, reservable):
        """Sets the reservable of this Facility.

        Whether the Facility is reservable  # noqa: E501

        :param reservable: The reservable of this Facility.  # noqa: E501
        :type: object
        """
        if reservable is None:
            raise ValueError(
                "Invalid value for `reservable`, must not be `None`"
            )  # noqa: E501

        self._reservable = reservable

    @property
    def enabled(self):
        """Gets the enabled of this Facility.  # noqa: E501

        Whether the Facility is enabled  # noqa: E501

        :return: The enabled of this Facility.  # noqa: E501
        :rtype: object
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Facility.

        Whether the Facility is enabled  # noqa: E501

        :param enabled: The enabled of this Facility.  # noqa: E501
        :type: object
        """
        if enabled is None:
            raise ValueError(
                "Invalid value for `enabled`, must not be `None`"
            )  # noqa: E501

        self._enabled = enabled

    @property
    def campsite(self):
        """Gets the campsite of this Facility.  # noqa: E501


        :return: The campsite of this Facility.  # noqa: E501
        :rtype: list[FacilityCampsite]
        """
        return self._campsite

    @campsite.setter
    def campsite(self, campsite):
        """Sets the campsite of this Facility.


        :param campsite: The campsite of this Facility.  # noqa: E501
        :type: list[FacilityCampsite]
        """

        self._campsite = campsite

    @property
    def permitentrance(self):
        """Gets the permitentrance of this Facility.  # noqa: E501


        :return: The permitentrance of this Facility.  # noqa: E501
        :rtype: list[FacilityPermitEntrance]
        """
        return self._permitentrance

    @permitentrance.setter
    def permitentrance(self, permitentrance):
        """Sets the permitentrance of this Facility.


        :param permitentrance: The permitentrance of this Facility.  # noqa: E501
        :type: list[FacilityPermitEntrance]
        """

        self._permitentrance = permitentrance

    @property
    def tour(self):
        """Gets the tour of this Facility.  # noqa: E501


        :return: The tour of this Facility.  # noqa: E501
        :rtype: list[FacilityTour]
        """
        return self._tour

    @tour.setter
    def tour(self, tour):
        """Sets the tour of this Facility.


        :param tour: The tour of this Facility.  # noqa: E501
        :type: list[FacilityTour]
        """

        self._tour = tour

    @property
    def organization(self):
        """Gets the organization of this Facility.  # noqa: E501


        :return: The organization of this Facility.  # noqa: E501
        :rtype: list[Organization]
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Facility.


        :param organization: The organization of this Facility.  # noqa: E501
        :type: list[Organization]
        """

        self._organization = organization

    @property
    def recarea(self):
        """Gets the recarea of this Facility.  # noqa: E501


        :return: The recarea of this Facility.  # noqa: E501
        :rtype: list[FacilityRecArea]
        """
        return self._recarea

    @recarea.setter
    def recarea(self, recarea):
        """Sets the recarea of this Facility.


        :param recarea: The recarea of this Facility.  # noqa: E501
        :type: list[FacilityRecArea]
        """

        self._recarea = recarea

    @property
    def facilityaddress(self):
        """Gets the facilityaddress of this Facility.  # noqa: E501


        :return: The facilityaddress of this Facility.  # noqa: E501
        :rtype: list[FacilityAddress]
        """
        return self._facilityaddress

    @facilityaddress.setter
    def facilityaddress(self, facilityaddress):
        """Sets the facilityaddress of this Facility.


        :param facilityaddress: The facilityaddress of this Facility.  # noqa: E501
        :type: list[FacilityAddress]
        """

        self._facilityaddress = facilityaddress

    @property
    def activity(self):
        """Gets the activity of this Facility.  # noqa: E501


        :return: The activity of this Facility.  # noqa: E501
        :rtype: list[FacilityActivity]
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Facility.


        :param activity: The activity of this Facility.  # noqa: E501
        :type: list[FacilityActivity]
        """

        self._activity = activity

    @property
    def event(self):
        """Gets the event of this Facility.  # noqa: E501


        :return: The event of this Facility.  # noqa: E501
        :rtype: list[Event]
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Facility.


        :param event: The event of this Facility.  # noqa: E501
        :type: list[Event]
        """

        self._event = event

    @property
    def link(self):
        """Gets the link of this Facility.  # noqa: E501


        :return: The link of this Facility.  # noqa: E501
        :rtype: list[Link]
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Facility.


        :param link: The link of this Facility.  # noqa: E501
        :type: list[Link]
        """

        self._link = link

    @property
    def media(self):
        """Gets the media of this Facility.  # noqa: E501


        :return: The media of this Facility.  # noqa: E501
        :rtype: list[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Facility.


        :param media: The media of this Facility.  # noqa: E501
        :type: list[Media]
        """

        self._media = media

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Facility, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Facility):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
