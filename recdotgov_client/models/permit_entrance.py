# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PermitEntrance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "permit_entrance_id": "str",
        "facility_id": "str",
        "permit_entrance_name": "str",
        "permit_entrance_description": "str",
        "district": "str",
        "town": "str",
        "permit_entrance_accessible": "bool",
        "longitude": "float",
        "latitude": "float",
        "geosjon": "FacilityGEOJSON",
        "created_date": "date",
        "last_updated_date": "date",
        "attributes": "list[Attribute]",
        "entitymedia": "list[Media]",
        "zones": "list[Zone]",
    }

    attribute_map = {
        "permit_entrance_id": "PermitEntranceID",
        "facility_id": "FacilityID",
        "permit_entrance_name": "PermitEntranceName",
        "permit_entrance_description": "PermitEntranceDescription",
        "district": "District",
        "town": "Town",
        "permit_entrance_accessible": "PermitEntranceAccessible",
        "longitude": "Longitude",
        "latitude": "Latitude",
        "geosjon": "GEOSJON",
        "created_date": "CreatedDate",
        "last_updated_date": "LastUpdatedDate",
        "attributes": "ATTRIBUTES",
        "entitymedia": "ENTITYMEDIA",
        "zones": "ZONES",
    }

    def __init__(
        self,
        permit_entrance_id=None,
        facility_id=None,
        permit_entrance_name=None,
        permit_entrance_description=None,
        district=None,
        town=None,
        permit_entrance_accessible=None,
        longitude=None,
        latitude=None,
        geosjon=None,
        created_date=None,
        last_updated_date=None,
        attributes=None,
        entitymedia=None,
        zones=None,
    ):  # noqa: E501
        """PermitEntrance - a model defined in Swagger"""  # noqa: E501
        self._permit_entrance_id = None
        self._facility_id = None
        self._permit_entrance_name = None
        self._permit_entrance_description = None
        self._district = None
        self._town = None
        self._permit_entrance_accessible = None
        self._longitude = None
        self._latitude = None
        self._geosjon = None
        self._created_date = None
        self._last_updated_date = None
        self._attributes = None
        self._entitymedia = None
        self._zones = None
        self.discriminator = None
        self.permit_entrance_id = permit_entrance_id
        self.facility_id = facility_id
        self.permit_entrance_name = permit_entrance_name
        self.permit_entrance_description = permit_entrance_description
        self.district = district
        self.town = town
        self.permit_entrance_accessible = permit_entrance_accessible
        self.longitude = longitude
        self.latitude = latitude
        if geosjon is not None:
            self.geosjon = geosjon
        self.created_date = created_date
        self.last_updated_date = last_updated_date
        self.attributes = attributes
        self.entitymedia = entitymedia
        self.zones = zones

    @property
    def permit_entrance_id(self):
        """Gets the permit_entrance_id of this PermitEntrance.  # noqa: E501

        Permit Entrance ID  # noqa: E501

        :return: The permit_entrance_id of this PermitEntrance.  # noqa: E501
        :rtype: str
        """
        return self._permit_entrance_id

    @permit_entrance_id.setter
    def permit_entrance_id(self, permit_entrance_id):
        """Sets the permit_entrance_id of this PermitEntrance.

        Permit Entrance ID  # noqa: E501

        :param permit_entrance_id: The permit_entrance_id of this PermitEntrance.  # noqa: E501
        :type: str
        """
        if permit_entrance_id is None:
            raise ValueError(
                "Invalid value for `permit_entrance_id`, must not be `None`"
            )  # noqa: E501

        self._permit_entrance_id = permit_entrance_id

    @property
    def facility_id(self):
        """Gets the facility_id of this PermitEntrance.  # noqa: E501

        Facility ID the permit belongs to  # noqa: E501

        :return: The facility_id of this PermitEntrance.  # noqa: E501
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this PermitEntrance.

        Facility ID the permit belongs to  # noqa: E501

        :param facility_id: The facility_id of this PermitEntrance.  # noqa: E501
        :type: str
        """
        if facility_id is None:
            raise ValueError(
                "Invalid value for `facility_id`, must not be `None`"
            )  # noqa: E501

        self._facility_id = facility_id

    @property
    def permit_entrance_name(self):
        """Gets the permit_entrance_name of this PermitEntrance.  # noqa: E501

        Permit Entrance name  # noqa: E501

        :return: The permit_entrance_name of this PermitEntrance.  # noqa: E501
        :rtype: str
        """
        return self._permit_entrance_name

    @permit_entrance_name.setter
    def permit_entrance_name(self, permit_entrance_name):
        """Sets the permit_entrance_name of this PermitEntrance.

        Permit Entrance name  # noqa: E501

        :param permit_entrance_name: The permit_entrance_name of this PermitEntrance.  # noqa: E501
        :type: str
        """
        if permit_entrance_name is None:
            raise ValueError(
                "Invalid value for `permit_entrance_name`, must not be `None`"
            )  # noqa: E501

        self._permit_entrance_name = permit_entrance_name

    @property
    def permit_entrance_description(self):
        """Gets the permit_entrance_description of this PermitEntrance.  # noqa: E501

        Permit Entrance description  # noqa: E501

        :return: The permit_entrance_description of this PermitEntrance.  # noqa: E501
        :rtype: str
        """
        return self._permit_entrance_description

    @permit_entrance_description.setter
    def permit_entrance_description(self, permit_entrance_description):
        """Sets the permit_entrance_description of this PermitEntrance.

        Permit Entrance description  # noqa: E501

        :param permit_entrance_description: The permit_entrance_description of this PermitEntrance.  # noqa: E501
        :type: str
        """
        if permit_entrance_description is None:
            raise ValueError(
                "Invalid value for `permit_entrance_description`, must not be `None`"
            )  # noqa: E501

        self._permit_entrance_description = permit_entrance_description

    @property
    def district(self):
        """Gets the district of this PermitEntrance.  # noqa: E501

        District the permit resides in  # noqa: E501

        :return: The district of this PermitEntrance.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this PermitEntrance.

        District the permit resides in  # noqa: E501

        :param district: The district of this PermitEntrance.  # noqa: E501
        :type: str
        """
        if district is None:
            raise ValueError(
                "Invalid value for `district`, must not be `None`"
            )  # noqa: E501

        self._district = district

    @property
    def town(self):
        """Gets the town of this PermitEntrance.  # noqa: E501

        Town the permit resides in  # noqa: E501

        :return: The town of this PermitEntrance.  # noqa: E501
        :rtype: str
        """
        return self._town

    @town.setter
    def town(self, town):
        """Sets the town of this PermitEntrance.

        Town the permit resides in  # noqa: E501

        :param town: The town of this PermitEntrance.  # noqa: E501
        :type: str
        """
        if town is None:
            raise ValueError(
                "Invalid value for `town`, must not be `None`"
            )  # noqa: E501

        self._town = town

    @property
    def permit_entrance_accessible(self):
        """Gets the permit_entrance_accessible of this PermitEntrance.  # noqa: E501

        Is the permit accessible by vehicle  # noqa: E501

        :return: The permit_entrance_accessible of this PermitEntrance.  # noqa: E501
        :rtype: bool
        """
        return self._permit_entrance_accessible

    @permit_entrance_accessible.setter
    def permit_entrance_accessible(self, permit_entrance_accessible):
        """Sets the permit_entrance_accessible of this PermitEntrance.

        Is the permit accessible by vehicle  # noqa: E501

        :param permit_entrance_accessible: The permit_entrance_accessible of this PermitEntrance.  # noqa: E501
        :type: bool
        """
        if permit_entrance_accessible is None:
            raise ValueError(
                "Invalid value for `permit_entrance_accessible`, must not be `None`"
            )  # noqa: E501

        self._permit_entrance_accessible = permit_entrance_accessible

    @property
    def longitude(self):
        """Gets the longitude of this PermitEntrance.  # noqa: E501

        Latitude of the permit location  # noqa: E501

        :return: The longitude of this PermitEntrance.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PermitEntrance.

        Latitude of the permit location  # noqa: E501

        :param longitude: The longitude of this PermitEntrance.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError(
                "Invalid value for `longitude`, must not be `None`"
            )  # noqa: E501

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this PermitEntrance.  # noqa: E501

        Longitude of the permit location  # noqa: E501

        :return: The latitude of this PermitEntrance.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PermitEntrance.

        Longitude of the permit location  # noqa: E501

        :param latitude: The latitude of this PermitEntrance.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError(
                "Invalid value for `latitude`, must not be `None`"
            )  # noqa: E501

        self._latitude = latitude

    @property
    def geosjon(self):
        """Gets the geosjon of this PermitEntrance.  # noqa: E501


        :return: The geosjon of this PermitEntrance.  # noqa: E501
        :rtype: FacilityGEOJSON
        """
        return self._geosjon

    @geosjon.setter
    def geosjon(self, geosjon):
        """Sets the geosjon of this PermitEntrance.


        :param geosjon: The geosjon of this PermitEntrance.  # noqa: E501
        :type: FacilityGEOJSON
        """

        self._geosjon = geosjon

    @property
    def created_date(self):
        """Gets the created_date of this PermitEntrance.  # noqa: E501

        Record creation date  # noqa: E501

        :return: The created_date of this PermitEntrance.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this PermitEntrance.

        Record creation date  # noqa: E501

        :param created_date: The created_date of this PermitEntrance.  # noqa: E501
        :type: date
        """
        if created_date is None:
            raise ValueError(
                "Invalid value for `created_date`, must not be `None`"
            )  # noqa: E501

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this PermitEntrance.  # noqa: E501

        Record last update date  # noqa: E501

        :return: The last_updated_date of this PermitEntrance.  # noqa: E501
        :rtype: date
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this PermitEntrance.

        Record last update date  # noqa: E501

        :param last_updated_date: The last_updated_date of this PermitEntrance.  # noqa: E501
        :type: date
        """
        if last_updated_date is None:
            raise ValueError(
                "Invalid value for `last_updated_date`, must not be `None`"
            )  # noqa: E501

        self._last_updated_date = last_updated_date

    @property
    def attributes(self):
        """Gets the attributes of this PermitEntrance.  # noqa: E501

        Attributes related to the permit  # noqa: E501

        :return: The attributes of this PermitEntrance.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PermitEntrance.

        Attributes related to the permit  # noqa: E501

        :param attributes: The attributes of this PermitEntrance.  # noqa: E501
        :type: list[Attribute]
        """
        if attributes is None:
            raise ValueError(
                "Invalid value for `attributes`, must not be `None`"
            )  # noqa: E501

        self._attributes = attributes

    @property
    def entitymedia(self):
        """Gets the entitymedia of this PermitEntrance.  # noqa: E501

        Array of Media for the Permit Entrance  # noqa: E501

        :return: The entitymedia of this PermitEntrance.  # noqa: E501
        :rtype: list[Media]
        """
        return self._entitymedia

    @entitymedia.setter
    def entitymedia(self, entitymedia):
        """Sets the entitymedia of this PermitEntrance.

        Array of Media for the Permit Entrance  # noqa: E501

        :param entitymedia: The entitymedia of this PermitEntrance.  # noqa: E501
        :type: list[Media]
        """
        if entitymedia is None:
            raise ValueError(
                "Invalid value for `entitymedia`, must not be `None`"
            )  # noqa: E501

        self._entitymedia = entitymedia

    @property
    def zones(self):
        """Gets the zones of this PermitEntrance.  # noqa: E501

        Additional Zone information related to the permit  # noqa: E501

        :return: The zones of this PermitEntrance.  # noqa: E501
        :rtype: list[Zone]
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """Sets the zones of this PermitEntrance.

        Additional Zone information related to the permit  # noqa: E501

        :param zones: The zones of this PermitEntrance.  # noqa: E501
        :type: list[Zone]
        """
        if zones is None:
            raise ValueError(
                "Invalid value for `zones`, must not be `None`"
            )  # noqa: E501

        self._zones = zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PermitEntrance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermitEntrance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
