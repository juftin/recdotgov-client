# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tour(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tour_id': 'str',
        'facility_id': 'str',
        'tour_name': 'str',
        'tour_type': 'str',
        'tour_description': 'str',
        'tour_duration': 'int',
        'tour_accessible': 'bool',
        'attributes': 'object',
        'entitymedia': 'object',
        'membertours': 'list[TourMEMBERTOURS]'
    }

    attribute_map = {
        'tour_id': 'TourID',
        'facility_id': 'FacilityID',
        'tour_name': 'TourName',
        'tour_type': 'TourType',
        'tour_description': 'TourDescription',
        'tour_duration': 'TourDuration',
        'tour_accessible': 'TourAccessible',
        'attributes': 'ATTRIBUTES',
        'entitymedia': 'ENTITYMEDIA',
        'membertours': 'MEMBERTOURS'
    }

    def __init__(self, tour_id=None, facility_id=None, tour_name=None, tour_type=None, tour_description=None, tour_duration=None, tour_accessible=None, attributes=None, entitymedia=None, membertours=None):  # noqa: E501
        """Tour - a model defined in Swagger"""  # noqa: E501
        self._tour_id = None
        self._facility_id = None
        self._tour_name = None
        self._tour_type = None
        self._tour_description = None
        self._tour_duration = None
        self._tour_accessible = None
        self._attributes = None
        self._entitymedia = None
        self._membertours = None
        self.discriminator = None
        self.tour_id = tour_id
        self.facility_id = facility_id
        self.tour_name = tour_name
        self.tour_type = tour_type
        self.tour_description = tour_description
        self.tour_duration = tour_duration
        self.tour_accessible = tour_accessible
        self.attributes = attributes
        self.entitymedia = entitymedia
        self.membertours = membertours

    @property
    def tour_id(self):
        """Gets the tour_id of this Tour.  # noqa: E501

        Tour ID  # noqa: E501

        :return: The tour_id of this Tour.  # noqa: E501
        :rtype: str
        """
        return self._tour_id

    @tour_id.setter
    def tour_id(self, tour_id):
        """Sets the tour_id of this Tour.

        Tour ID  # noqa: E501

        :param tour_id: The tour_id of this Tour.  # noqa: E501
        :type: str
        """
        if tour_id is None:
            raise ValueError("Invalid value for `tour_id`, must not be `None`")  # noqa: E501

        self._tour_id = tour_id

    @property
    def facility_id(self):
        """Gets the facility_id of this Tour.  # noqa: E501

        Facility ID the tour belongs to  # noqa: E501

        :return: The facility_id of this Tour.  # noqa: E501
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this Tour.

        Facility ID the tour belongs to  # noqa: E501

        :param facility_id: The facility_id of this Tour.  # noqa: E501
        :type: str
        """
        if facility_id is None:
            raise ValueError("Invalid value for `facility_id`, must not be `None`")  # noqa: E501

        self._facility_id = facility_id

    @property
    def tour_name(self):
        """Gets the tour_name of this Tour.  # noqa: E501

        Tour name  # noqa: E501

        :return: The tour_name of this Tour.  # noqa: E501
        :rtype: str
        """
        return self._tour_name

    @tour_name.setter
    def tour_name(self, tour_name):
        """Sets the tour_name of this Tour.

        Tour name  # noqa: E501

        :param tour_name: The tour_name of this Tour.  # noqa: E501
        :type: str
        """
        if tour_name is None:
            raise ValueError("Invalid value for `tour_name`, must not be `None`")  # noqa: E501

        self._tour_name = tour_name

    @property
    def tour_type(self):
        """Gets the tour_type of this Tour.  # noqa: E501

        Tour Type  # noqa: E501

        :return: The tour_type of this Tour.  # noqa: E501
        :rtype: str
        """
        return self._tour_type

    @tour_type.setter
    def tour_type(self, tour_type):
        """Sets the tour_type of this Tour.

        Tour Type  # noqa: E501

        :param tour_type: The tour_type of this Tour.  # noqa: E501
        :type: str
        """
        if tour_type is None:
            raise ValueError("Invalid value for `tour_type`, must not be `None`")  # noqa: E501

        self._tour_type = tour_type

    @property
    def tour_description(self):
        """Gets the tour_description of this Tour.  # noqa: E501

        Tour description  # noqa: E501

        :return: The tour_description of this Tour.  # noqa: E501
        :rtype: str
        """
        return self._tour_description

    @tour_description.setter
    def tour_description(self, tour_description):
        """Sets the tour_description of this Tour.

        Tour description  # noqa: E501

        :param tour_description: The tour_description of this Tour.  # noqa: E501
        :type: str
        """
        if tour_description is None:
            raise ValueError("Invalid value for `tour_description`, must not be `None`")  # noqa: E501

        self._tour_description = tour_description

    @property
    def tour_duration(self):
        """Gets the tour_duration of this Tour.  # noqa: E501

        Tour duration  # noqa: E501

        :return: The tour_duration of this Tour.  # noqa: E501
        :rtype: int
        """
        return self._tour_duration

    @tour_duration.setter
    def tour_duration(self, tour_duration):
        """Sets the tour_duration of this Tour.

        Tour duration  # noqa: E501

        :param tour_duration: The tour_duration of this Tour.  # noqa: E501
        :type: int
        """
        if tour_duration is None:
            raise ValueError("Invalid value for `tour_duration`, must not be `None`")  # noqa: E501

        self._tour_duration = tour_duration

    @property
    def tour_accessible(self):
        """Gets the tour_accessible of this Tour.  # noqa: E501

        Is the tour accessible by vehicle  # noqa: E501

        :return: The tour_accessible of this Tour.  # noqa: E501
        :rtype: bool
        """
        return self._tour_accessible

    @tour_accessible.setter
    def tour_accessible(self, tour_accessible):
        """Sets the tour_accessible of this Tour.

        Is the tour accessible by vehicle  # noqa: E501

        :param tour_accessible: The tour_accessible of this Tour.  # noqa: E501
        :type: bool
        """
        if tour_accessible is None:
            raise ValueError("Invalid value for `tour_accessible`, must not be `None`")  # noqa: E501

        self._tour_accessible = tour_accessible

    @property
    def attributes(self):
        """Gets the attributes of this Tour.  # noqa: E501

        Array of Attributes for the tour  # noqa: E501

        :return: The attributes of this Tour.  # noqa: E501
        :rtype: object
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Tour.

        Array of Attributes for the tour  # noqa: E501

        :param attributes: The attributes of this Tour.  # noqa: E501
        :type: object
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")  # noqa: E501

        self._attributes = attributes

    @property
    def entitymedia(self):
        """Gets the entitymedia of this Tour.  # noqa: E501

        Media records for Tour  # noqa: E501

        :return: The entitymedia of this Tour.  # noqa: E501
        :rtype: object
        """
        return self._entitymedia

    @entitymedia.setter
    def entitymedia(self, entitymedia):
        """Sets the entitymedia of this Tour.

        Media records for Tour  # noqa: E501

        :param entitymedia: The entitymedia of this Tour.  # noqa: E501
        :type: object
        """
        if entitymedia is None:
            raise ValueError("Invalid value for `entitymedia`, must not be `None`")  # noqa: E501

        self._entitymedia = entitymedia

    @property
    def membertours(self):
        """Gets the membertours of this Tour.  # noqa: E501

        Tour IDs of associated or multi-part Tours  # noqa: E501

        :return: The membertours of this Tour.  # noqa: E501
        :rtype: list[TourMEMBERTOURS]
        """
        return self._membertours

    @membertours.setter
    def membertours(self, membertours):
        """Sets the membertours of this Tour.

        Tour IDs of associated or multi-part Tours  # noqa: E501

        :param membertours: The membertours of this Tour.  # noqa: E501
        :type: list[TourMEMBERTOURS]
        """
        if membertours is None:
            raise ValueError("Invalid value for `membertours`, must not be `None`")  # noqa: E501

        self._membertours = membertours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tour, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tour):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
