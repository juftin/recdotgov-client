# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RecreationAreaActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'str',
        'activity_parent_id': 'str',
        'rec_area_id': 'str',
        'activity_name': 'str',
        'rec_area_activity_description': 'str',
        'rec_area_activity_fee_description': 'str'
    }

    attribute_map = {
        'activity_id': 'ActivityID',
        'activity_parent_id': 'ActivityParentID',
        'rec_area_id': 'RecAreaID',
        'activity_name': 'ActivityName',
        'rec_area_activity_description': 'RecAreaActivityDescription',
        'rec_area_activity_fee_description': 'RecAreaActivityFeeDescription'
    }

    def __init__(self, activity_id=None, activity_parent_id=None, rec_area_id=None, activity_name=None, rec_area_activity_description=None, rec_area_activity_fee_description=None):  # noqa: E501
        """RecreationAreaActivity - a model defined in Swagger"""  # noqa: E501
        self._activity_id = None
        self._activity_parent_id = None
        self._rec_area_id = None
        self._activity_name = None
        self._rec_area_activity_description = None
        self._rec_area_activity_fee_description = None
        self.discriminator = None
        self.activity_id = activity_id
        self.activity_parent_id = activity_parent_id
        self.rec_area_id = rec_area_id
        self.activity_name = activity_name
        self.rec_area_activity_description = rec_area_activity_description
        self.rec_area_activity_fee_description = rec_area_activity_fee_description

    @property
    def activity_id(self):
        """Gets the activity_id of this RecreationAreaActivity.  # noqa: E501

        Activity ID  # noqa: E501

        :return: The activity_id of this RecreationAreaActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this RecreationAreaActivity.

        Activity ID  # noqa: E501

        :param activity_id: The activity_id of this RecreationAreaActivity.  # noqa: E501
        :type: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def activity_parent_id(self):
        """Gets the activity_parent_id of this RecreationAreaActivity.  # noqa: E501

        Parent ID of the related Actitvity  # noqa: E501

        :return: The activity_parent_id of this RecreationAreaActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_parent_id

    @activity_parent_id.setter
    def activity_parent_id(self, activity_parent_id):
        """Sets the activity_parent_id of this RecreationAreaActivity.

        Parent ID of the related Actitvity  # noqa: E501

        :param activity_parent_id: The activity_parent_id of this RecreationAreaActivity.  # noqa: E501
        :type: str
        """
        if activity_parent_id is None:
            raise ValueError("Invalid value for `activity_parent_id`, must not be `None`")  # noqa: E501

        self._activity_parent_id = activity_parent_id

    @property
    def rec_area_id(self):
        """Gets the rec_area_id of this RecreationAreaActivity.  # noqa: E501

        Parent RecArea ID of the Actitvity  # noqa: E501

        :return: The rec_area_id of this RecreationAreaActivity.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_id

    @rec_area_id.setter
    def rec_area_id(self, rec_area_id):
        """Sets the rec_area_id of this RecreationAreaActivity.

        Parent RecArea ID of the Actitvity  # noqa: E501

        :param rec_area_id: The rec_area_id of this RecreationAreaActivity.  # noqa: E501
        :type: str
        """
        if rec_area_id is None:
            raise ValueError("Invalid value for `rec_area_id`, must not be `None`")  # noqa: E501

        self._rec_area_id = rec_area_id

    @property
    def activity_name(self):
        """Gets the activity_name of this RecreationAreaActivity.  # noqa: E501

        Name of the Activity  # noqa: E501

        :return: The activity_name of this RecreationAreaActivity.  # noqa: E501
        :rtype: str
        """
        return self._activity_name

    @activity_name.setter
    def activity_name(self, activity_name):
        """Sets the activity_name of this RecreationAreaActivity.

        Name of the Activity  # noqa: E501

        :param activity_name: The activity_name of this RecreationAreaActivity.  # noqa: E501
        :type: str
        """
        if activity_name is None:
            raise ValueError("Invalid value for `activity_name`, must not be `None`")  # noqa: E501

        self._activity_name = activity_name

    @property
    def rec_area_activity_description(self):
        """Gets the rec_area_activity_description of this RecreationAreaActivity.  # noqa: E501

        Description of the Activity  # noqa: E501

        :return: The rec_area_activity_description of this RecreationAreaActivity.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_activity_description

    @rec_area_activity_description.setter
    def rec_area_activity_description(self, rec_area_activity_description):
        """Sets the rec_area_activity_description of this RecreationAreaActivity.

        Description of the Activity  # noqa: E501

        :param rec_area_activity_description: The rec_area_activity_description of this RecreationAreaActivity.  # noqa: E501
        :type: str
        """
        if rec_area_activity_description is None:
            raise ValueError("Invalid value for `rec_area_activity_description`, must not be `None`")  # noqa: E501

        self._rec_area_activity_description = rec_area_activity_description

    @property
    def rec_area_activity_fee_description(self):
        """Gets the rec_area_activity_fee_description of this RecreationAreaActivity.  # noqa: E501

        Text describing monetary charges associated with the Activity  # noqa: E501

        :return: The rec_area_activity_fee_description of this RecreationAreaActivity.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_activity_fee_description

    @rec_area_activity_fee_description.setter
    def rec_area_activity_fee_description(self, rec_area_activity_fee_description):
        """Sets the rec_area_activity_fee_description of this RecreationAreaActivity.

        Text describing monetary charges associated with the Activity  # noqa: E501

        :param rec_area_activity_fee_description: The rec_area_activity_fee_description of this RecreationAreaActivity.  # noqa: E501
        :type: str
        """
        if rec_area_activity_fee_description is None:
            raise ValueError("Invalid value for `rec_area_activity_fee_description`, must not be `None`")  # noqa: E501

        self._rec_area_activity_fee_description = rec_area_activity_fee_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RecreationAreaActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecreationAreaActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
