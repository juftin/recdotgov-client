# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FacilityRecArea(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rec_area_id': 'str',
        'rec_area_name': 'str'
    }

    attribute_map = {
        'rec_area_id': 'RecAreaID',
        'rec_area_name': 'RecAreaName'
    }

    def __init__(self, rec_area_id=None, rec_area_name=None):  # noqa: E501
        """FacilityRecArea - a model defined in Swagger"""  # noqa: E501
        self._rec_area_id = None
        self._rec_area_name = None
        self.discriminator = None
        self.rec_area_id = rec_area_id
        self.rec_area_name = rec_area_name

    @property
    def rec_area_id(self):
        """Gets the rec_area_id of this FacilityRecArea.  # noqa: E501

        RIDB unique RecArea ID  # noqa: E501

        :return: The rec_area_id of this FacilityRecArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_id

    @rec_area_id.setter
    def rec_area_id(self, rec_area_id):
        """Sets the rec_area_id of this FacilityRecArea.

        RIDB unique RecArea ID  # noqa: E501

        :param rec_area_id: The rec_area_id of this FacilityRecArea.  # noqa: E501
        :type: str
        """
        if rec_area_id is None:
            raise ValueError("Invalid value for `rec_area_id`, must not be `None`")  # noqa: E501

        self._rec_area_id = rec_area_id

    @property
    def rec_area_name(self):
        """Gets the rec_area_name of this FacilityRecArea.  # noqa: E501

        Full name of the RecArea  # noqa: E501

        :return: The rec_area_name of this FacilityRecArea.  # noqa: E501
        :rtype: str
        """
        return self._rec_area_name

    @rec_area_name.setter
    def rec_area_name(self, rec_area_name):
        """Sets the rec_area_name of this FacilityRecArea.

        Full name of the RecArea  # noqa: E501

        :param rec_area_name: The rec_area_name of this FacilityRecArea.  # noqa: E501
        :type: str
        """
        if rec_area_name is None:
            raise ValueError("Invalid value for `rec_area_name`, must not be `None`")  # noqa: E501

        self._rec_area_name = rec_area_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FacilityRecArea, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FacilityRecArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
