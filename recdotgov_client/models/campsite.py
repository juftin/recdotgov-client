# coding: utf-8

"""
    RIDB API

    The Recreation Information Database (RIDB) provides data resources to citizens, offering a single point of access to information about recreational opportunities nationwide. The RIDB represents an authoritative source of information and services for millions of visitors to federal lands, historic sites, museums, and other attractions/resources. This initiative integrates multiple Federal channels and sources about recreation opportunities into a one-stop, searchable database of recreational areas nationwide.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Campsite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "campsite_id": "str",
        "facility_id": "str",
        "campsite_name": "str",
        "campsite_type": "str",
        "type_of_use": "str",
        "loop": "str",
        "campsite_accessible": "bool",
        "campsite_longitude": "float",
        "campsite_latitude": "float",
        "created_date": "date",
        "last_updated_date": "date",
        "attributes": "list[Attribute]",
        "permittedequipment": "list[PermittedEquipment]",
        "entitymedia": "list[Media]",
    }

    attribute_map = {
        "campsite_id": "CampsiteID",
        "facility_id": "FacilityID",
        "campsite_name": "CampsiteName",
        "campsite_type": "CampsiteType",
        "type_of_use": "TypeOfUse",
        "loop": "Loop",
        "campsite_accessible": "CampsiteAccessible",
        "campsite_longitude": "CampsiteLongitude",
        "campsite_latitude": "CampsiteLatitude",
        "created_date": "CreatedDate",
        "last_updated_date": "LastUpdatedDate",
        "attributes": "ATTRIBUTES",
        "permittedequipment": "PERMITTEDEQUIPMENT",
        "entitymedia": "ENTITYMEDIA",
    }

    def __init__(
        self,
        campsite_id=None,
        facility_id=None,
        campsite_name=None,
        campsite_type=None,
        type_of_use=None,
        loop=None,
        campsite_accessible=None,
        campsite_longitude=None,
        campsite_latitude=None,
        created_date=None,
        last_updated_date=None,
        attributes=None,
        permittedequipment=None,
        entitymedia=None,
    ):  # noqa: E501
        """Campsite - a model defined in Swagger"""  # noqa: E501
        self._campsite_id = None
        self._facility_id = None
        self._campsite_name = None
        self._campsite_type = None
        self._type_of_use = None
        self._loop = None
        self._campsite_accessible = None
        self._campsite_longitude = None
        self._campsite_latitude = None
        self._created_date = None
        self._last_updated_date = None
        self._attributes = None
        self._permittedequipment = None
        self._entitymedia = None
        self.discriminator = None
        self.campsite_id = campsite_id
        self.facility_id = facility_id
        self.campsite_name = campsite_name
        self.campsite_type = campsite_type
        self.type_of_use = type_of_use
        self.loop = loop
        self.campsite_accessible = campsite_accessible
        if campsite_longitude is not None:
            self.campsite_longitude = campsite_longitude
        if campsite_latitude is not None:
            self.campsite_latitude = campsite_latitude
        self.created_date = created_date
        self.last_updated_date = last_updated_date
        self.attributes = attributes
        self.permittedequipment = permittedequipment
        self.entitymedia = entitymedia

    @property
    def campsite_id(self):
        """Gets the campsite_id of this Campsite.  # noqa: E501

        Campsite ID  # noqa: E501

        :return: The campsite_id of this Campsite.  # noqa: E501
        :rtype: str
        """
        return self._campsite_id

    @campsite_id.setter
    def campsite_id(self, campsite_id):
        """Sets the campsite_id of this Campsite.

        Campsite ID  # noqa: E501

        :param campsite_id: The campsite_id of this Campsite.  # noqa: E501
        :type: str
        """
        if campsite_id is None:
            raise ValueError(
                "Invalid value for `campsite_id`, must not be `None`"
            )  # noqa: E501

        self._campsite_id = campsite_id

    @property
    def facility_id(self):
        """Gets the facility_id of this Campsite.  # noqa: E501

        Facility ID the campsite belongs to  # noqa: E501

        :return: The facility_id of this Campsite.  # noqa: E501
        :rtype: str
        """
        return self._facility_id

    @facility_id.setter
    def facility_id(self, facility_id):
        """Sets the facility_id of this Campsite.

        Facility ID the campsite belongs to  # noqa: E501

        :param facility_id: The facility_id of this Campsite.  # noqa: E501
        :type: str
        """
        if facility_id is None:
            raise ValueError(
                "Invalid value for `facility_id`, must not be `None`"
            )  # noqa: E501

        self._facility_id = facility_id

    @property
    def campsite_name(self):
        """Gets the campsite_name of this Campsite.  # noqa: E501

        Campsite name  # noqa: E501

        :return: The campsite_name of this Campsite.  # noqa: E501
        :rtype: str
        """
        return self._campsite_name

    @campsite_name.setter
    def campsite_name(self, campsite_name):
        """Sets the campsite_name of this Campsite.

        Campsite name  # noqa: E501

        :param campsite_name: The campsite_name of this Campsite.  # noqa: E501
        :type: str
        """
        if campsite_name is None:
            raise ValueError(
                "Invalid value for `campsite_name`, must not be `None`"
            )  # noqa: E501

        self._campsite_name = campsite_name

    @property
    def campsite_type(self):
        """Gets the campsite_type of this Campsite.  # noqa: E501

        Campsite type  # noqa: E501

        :return: The campsite_type of this Campsite.  # noqa: E501
        :rtype: str
        """
        return self._campsite_type

    @campsite_type.setter
    def campsite_type(self, campsite_type):
        """Sets the campsite_type of this Campsite.

        Campsite type  # noqa: E501

        :param campsite_type: The campsite_type of this Campsite.  # noqa: E501
        :type: str
        """
        if campsite_type is None:
            raise ValueError(
                "Invalid value for `campsite_type`, must not be `None`"
            )  # noqa: E501

        self._campsite_type = campsite_type

    @property
    def type_of_use(self):
        """Gets the type_of_use of this Campsite.  # noqa: E501

        Type of use  # noqa: E501

        :return: The type_of_use of this Campsite.  # noqa: E501
        :rtype: str
        """
        return self._type_of_use

    @type_of_use.setter
    def type_of_use(self, type_of_use):
        """Sets the type_of_use of this Campsite.

        Type of use  # noqa: E501

        :param type_of_use: The type_of_use of this Campsite.  # noqa: E501
        :type: str
        """
        if type_of_use is None:
            raise ValueError(
                "Invalid value for `type_of_use`, must not be `None`"
            )  # noqa: E501

        self._type_of_use = type_of_use

    @property
    def loop(self):
        """Gets the loop of this Campsite.  # noqa: E501

        Name of loop the campsite resides on  # noqa: E501

        :return: The loop of this Campsite.  # noqa: E501
        :rtype: str
        """
        return self._loop

    @loop.setter
    def loop(self, loop):
        """Sets the loop of this Campsite.

        Name of loop the campsite resides on  # noqa: E501

        :param loop: The loop of this Campsite.  # noqa: E501
        :type: str
        """
        if loop is None:
            raise ValueError(
                "Invalid value for `loop`, must not be `None`"
            )  # noqa: E501

        self._loop = loop

    @property
    def campsite_accessible(self):
        """Gets the campsite_accessible of this Campsite.  # noqa: E501

        Is the campsite accessible by vehicle  # noqa: E501

        :return: The campsite_accessible of this Campsite.  # noqa: E501
        :rtype: bool
        """
        return self._campsite_accessible

    @campsite_accessible.setter
    def campsite_accessible(self, campsite_accessible):
        """Sets the campsite_accessible of this Campsite.

        Is the campsite accessible by vehicle  # noqa: E501

        :param campsite_accessible: The campsite_accessible of this Campsite.  # noqa: E501
        :type: bool
        """
        if campsite_accessible is None:
            raise ValueError(
                "Invalid value for `campsite_accessible`, must not be `None`"
            )  # noqa: E501

        self._campsite_accessible = campsite_accessible

    @property
    def campsite_longitude(self):
        """Gets the campsite_longitude of this Campsite.  # noqa: E501

        Longitude of the permit  # noqa: E501

        :return: The campsite_longitude of this Campsite.  # noqa: E501
        :rtype: float
        """
        return self._campsite_longitude

    @campsite_longitude.setter
    def campsite_longitude(self, campsite_longitude):
        """Sets the campsite_longitude of this Campsite.

        Longitude of the permit  # noqa: E501

        :param campsite_longitude: The campsite_longitude of this Campsite.  # noqa: E501
        :type: float
        """

        self._campsite_longitude = campsite_longitude

    @property
    def campsite_latitude(self):
        """Gets the campsite_latitude of this Campsite.  # noqa: E501

        Latitude of the permit  # noqa: E501

        :return: The campsite_latitude of this Campsite.  # noqa: E501
        :rtype: float
        """
        return self._campsite_latitude

    @campsite_latitude.setter
    def campsite_latitude(self, campsite_latitude):
        """Sets the campsite_latitude of this Campsite.

        Latitude of the permit  # noqa: E501

        :param campsite_latitude: The campsite_latitude of this Campsite.  # noqa: E501
        :type: float
        """

        self._campsite_latitude = campsite_latitude

    @property
    def created_date(self):
        """Gets the created_date of this Campsite.  # noqa: E501

        Record creation date  # noqa: E501

        :return: The created_date of this Campsite.  # noqa: E501
        :rtype: date
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Campsite.

        Record creation date  # noqa: E501

        :param created_date: The created_date of this Campsite.  # noqa: E501
        :type: date
        """
        if created_date is None:
            raise ValueError(
                "Invalid value for `created_date`, must not be `None`"
            )  # noqa: E501

        self._created_date = created_date

    @property
    def last_updated_date(self):
        """Gets the last_updated_date of this Campsite.  # noqa: E501

        Record last update date  # noqa: E501

        :return: The last_updated_date of this Campsite.  # noqa: E501
        :rtype: date
        """
        return self._last_updated_date

    @last_updated_date.setter
    def last_updated_date(self, last_updated_date):
        """Sets the last_updated_date of this Campsite.

        Record last update date  # noqa: E501

        :param last_updated_date: The last_updated_date of this Campsite.  # noqa: E501
        :type: date
        """
        if last_updated_date is None:
            raise ValueError(
                "Invalid value for `last_updated_date`, must not be `None`"
            )  # noqa: E501

        self._last_updated_date = last_updated_date

    @property
    def attributes(self):
        """Gets the attributes of this Campsite.  # noqa: E501

        Array of Campsite Attributes  # noqa: E501

        :return: The attributes of this Campsite.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Campsite.

        Array of Campsite Attributes  # noqa: E501

        :param attributes: The attributes of this Campsite.  # noqa: E501
        :type: list[Attribute]
        """
        if attributes is None:
            raise ValueError(
                "Invalid value for `attributes`, must not be `None`"
            )  # noqa: E501

        self._attributes = attributes

    @property
    def permittedequipment(self):
        """Gets the permittedequipment of this Campsite.  # noqa: E501

        Array of Permitted Equipment allowed in the Campsite  # noqa: E501

        :return: The permittedequipment of this Campsite.  # noqa: E501
        :rtype: list[PermittedEquipment]
        """
        return self._permittedequipment

    @permittedequipment.setter
    def permittedequipment(self, permittedequipment):
        """Sets the permittedequipment of this Campsite.

        Array of Permitted Equipment allowed in the Campsite  # noqa: E501

        :param permittedequipment: The permittedequipment of this Campsite.  # noqa: E501
        :type: list[PermittedEquipment]
        """
        if permittedequipment is None:
            raise ValueError(
                "Invalid value for `permittedequipment`, must not be `None`"
            )  # noqa: E501

        self._permittedequipment = permittedequipment

    @property
    def entitymedia(self):
        """Gets the entitymedia of this Campsite.  # noqa: E501

        Array of Media for the Campsite  # noqa: E501

        :return: The entitymedia of this Campsite.  # noqa: E501
        :rtype: list[Media]
        """
        return self._entitymedia

    @entitymedia.setter
    def entitymedia(self, entitymedia):
        """Sets the entitymedia of this Campsite.

        Array of Media for the Campsite  # noqa: E501

        :param entitymedia: The entitymedia of this Campsite.  # noqa: E501
        :type: list[Media]
        """
        if entitymedia is None:
            raise ValueError(
                "Invalid value for `entitymedia`, must not be `None`"
            )  # noqa: E501

        self._entitymedia = entitymedia

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Campsite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Campsite):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
